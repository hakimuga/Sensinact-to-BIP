/*
* generated by Xtext
*/
package org.eclipse.sensinact.studio.language.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SensinactGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SensinactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sensinact");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSensinactAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cEcaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEcaDSL_SENSINACTParserRuleCall_1_0 = (RuleCall)cEcaAssignment_1.eContents().get(0);
		
		//// ==============
		//// Main structure
		//// ==============
		//Sensinact:
		//	{Sensinact} eca=DSL_SENSINACT;
		public ParserRule getRule() { return rule; }

		//{Sensinact} eca=DSL_SENSINACT
		public Group getGroup() { return cGroup; }

		//{Sensinact}
		public Action getSensinactAction_0() { return cSensinactAction_0; }

		//eca=DSL_SENSINACT
		public Assignment getEcaAssignment_1() { return cEcaAssignment_1; }

		//DSL_SENSINACT
		public RuleCall getEcaDSL_SENSINACTParserRuleCall_1_0() { return cEcaDSL_SENSINACTParserRuleCall_1_0; }
	}

	public class DSL_SENSINACTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DSL_SENSINACT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAutostartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAutostartDSL_FLAG_AUTOSTARTParserRuleCall_0_0 = (RuleCall)cAutostartAssignment_0.eContents().get(0);
		private final Assignment cResourcesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cResourcesDSL_ResourceParserRuleCall_1_0 = (RuleCall)cResourcesAssignment_1.eContents().get(0);
		private final Assignment cProbAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cProbDSL_CLOCK_STOCHASTICParserRuleCall_2_0 = (RuleCall)cProbAssignment_2.eContents().get(0);
		private final Assignment cCepAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCepDSL_CEP_STATEMENTParserRuleCall_3_0 = (RuleCall)cCepAssignment_3.eContents().get(0);
		private final Assignment cOnAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOnDSL_OnParserRuleCall_4_0 = (RuleCall)cOnAssignment_4.eContents().get(0);
		private final Assignment cEcaAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEcaDSL_ECA_STATEMENTParserRuleCall_5_0 = (RuleCall)cEcaAssignment_5.eContents().get(0);
		
		//DSL_SENSINACT:
		//	autostart=DSL_FLAG_AUTOSTART? resources+=DSL_Resource+ prob+=DSL_CLOCK_STOCHASTIC* cep+=DSL_CEP_STATEMENT* on=DSL_On
		//	eca=DSL_ECA_STATEMENT;
		public ParserRule getRule() { return rule; }

		//autostart=DSL_FLAG_AUTOSTART? resources+=DSL_Resource+ prob+=DSL_CLOCK_STOCHASTIC* cep+=DSL_CEP_STATEMENT* on=DSL_On
		//eca=DSL_ECA_STATEMENT
		public Group getGroup() { return cGroup; }

		//autostart=DSL_FLAG_AUTOSTART?
		public Assignment getAutostartAssignment_0() { return cAutostartAssignment_0; }

		//DSL_FLAG_AUTOSTART
		public RuleCall getAutostartDSL_FLAG_AUTOSTARTParserRuleCall_0_0() { return cAutostartDSL_FLAG_AUTOSTARTParserRuleCall_0_0; }

		//resources+=DSL_Resource+
		public Assignment getResourcesAssignment_1() { return cResourcesAssignment_1; }

		//DSL_Resource
		public RuleCall getResourcesDSL_ResourceParserRuleCall_1_0() { return cResourcesDSL_ResourceParserRuleCall_1_0; }

		//prob+=DSL_CLOCK_STOCHASTIC*
		public Assignment getProbAssignment_2() { return cProbAssignment_2; }

		//DSL_CLOCK_STOCHASTIC
		public RuleCall getProbDSL_CLOCK_STOCHASTICParserRuleCall_2_0() { return cProbDSL_CLOCK_STOCHASTICParserRuleCall_2_0; }

		//cep+=DSL_CEP_STATEMENT*
		public Assignment getCepAssignment_3() { return cCepAssignment_3; }

		//DSL_CEP_STATEMENT
		public RuleCall getCepDSL_CEP_STATEMENTParserRuleCall_3_0() { return cCepDSL_CEP_STATEMENTParserRuleCall_3_0; }

		//on=DSL_On
		public Assignment getOnAssignment_4() { return cOnAssignment_4; }

		//DSL_On
		public RuleCall getOnDSL_OnParserRuleCall_4_0() { return cOnDSL_OnParserRuleCall_4_0; }

		//eca=DSL_ECA_STATEMENT
		public Assignment getEcaAssignment_5() { return cEcaAssignment_5; }

		//DSL_ECA_STATEMENT
		public RuleCall getEcaDSL_ECA_STATEMENTParserRuleCall_5_0() { return cEcaDSL_ECA_STATEMENTParserRuleCall_5_0; }
	}

	public class DSL_CLOCK_STOCHASTICElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DSL_CLOCK_STOCHASTIC");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cUseKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cRefAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cRefDSL_ResourceCrossReference_0_1_0 = (CrossReference)cRefAssignment_0_1.eContents().get(0);
		private final RuleCall cRefDSL_ResourceIDTerminalRuleCall_0_1_0_1 = (RuleCall)cRefDSL_ResourceCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cRefAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final CrossReference cRefDSL_ResourceCrossReference_0_2_1_0 = (CrossReference)cRefAssignment_0_2_1.eContents().get(0);
		private final RuleCall cRefDSL_ResourceIDTerminalRuleCall_0_2_1_0_1 = (RuleCall)cRefDSL_ResourceCrossReference_0_2_1_0.eContents().get(1);
		private final Keyword cWithKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cValueAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cValueNUMBERParserRuleCall_0_4_0 = (RuleCall)cValueAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cUseKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRefAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cRefDSL_ResourceCrossReference_1_1_0 = (CrossReference)cRefAssignment_1_1.eContents().get(0);
		private final RuleCall cRefDSL_ResourceIDTerminalRuleCall_1_1_0_1 = (RuleCall)cRefDSL_ResourceCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cRefAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final CrossReference cRefDSL_ResourceCrossReference_1_2_1_0 = (CrossReference)cRefAssignment_1_2_1.eContents().get(0);
		private final RuleCall cRefDSL_ResourceIDTerminalRuleCall_1_2_1_0_1 = (RuleCall)cRefDSL_ResourceCrossReference_1_2_1_0.eContents().get(1);
		private final Keyword cWithKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Alternatives cAlternatives_1_4 = (Alternatives)cGroup_1.eContents().get(4);
		private final Keyword cWKeyword_1_4_0 = (Keyword)cAlternatives_1_4.eContents().get(0);
		private final Keyword cNKeyword_1_4_1 = (Keyword)cAlternatives_1_4.eContents().get(1);
		private final Keyword cEKeyword_1_4_2 = (Keyword)cAlternatives_1_4.eContents().get(2);
		private final Keyword cUKeyword_1_4_3 = (Keyword)cAlternatives_1_4.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cParam1Assignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cParam1NUMBERParserRuleCall_1_6_0 = (RuleCall)cParam1Assignment_1_6.eContents().get(0);
		private final Keyword cCommaKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		private final Assignment cParam2Assignment_1_8 = (Assignment)cGroup_1.eContents().get(8);
		private final RuleCall cParam2NUMBERParserRuleCall_1_8_0 = (RuleCall)cParam2Assignment_1_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_9 = (Keyword)cGroup_1.eContents().get(9);
		
		//DSL_CLOCK_STOCHASTIC:
		//	"use" ref+=[DSL_Resource] ("," ref+=[DSL_Resource])* "with" value=NUMBER | "use" ref+=[DSL_Resource] (","
		//	ref+=[DSL_Resource])* "with" ("W" | "N" | "E" | "U") "(" param1=NUMBER "," param2=NUMBER ")";
		public ParserRule getRule() { return rule; }

		//"use" ref+=[DSL_Resource] ("," ref+=[DSL_Resource])* "with" value=NUMBER | "use" ref+=[DSL_Resource] (","
		//ref+=[DSL_Resource])* "with" ("W" | "N" | "E" | "U") "(" param1=NUMBER "," param2=NUMBER ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"use" ref+=[DSL_Resource] ("," ref+=[DSL_Resource])* "with" value=NUMBER
		public Group getGroup_0() { return cGroup_0; }

		//"use"
		public Keyword getUseKeyword_0_0() { return cUseKeyword_0_0; }

		//ref+=[DSL_Resource]
		public Assignment getRefAssignment_0_1() { return cRefAssignment_0_1; }

		//[DSL_Resource]
		public CrossReference getRefDSL_ResourceCrossReference_0_1_0() { return cRefDSL_ResourceCrossReference_0_1_0; }

		//ID
		public RuleCall getRefDSL_ResourceIDTerminalRuleCall_0_1_0_1() { return cRefDSL_ResourceIDTerminalRuleCall_0_1_0_1; }

		//("," ref+=[DSL_Resource])*
		public Group getGroup_0_2() { return cGroup_0_2; }

		//","
		public Keyword getCommaKeyword_0_2_0() { return cCommaKeyword_0_2_0; }

		//ref+=[DSL_Resource]
		public Assignment getRefAssignment_0_2_1() { return cRefAssignment_0_2_1; }

		//[DSL_Resource]
		public CrossReference getRefDSL_ResourceCrossReference_0_2_1_0() { return cRefDSL_ResourceCrossReference_0_2_1_0; }

		//ID
		public RuleCall getRefDSL_ResourceIDTerminalRuleCall_0_2_1_0_1() { return cRefDSL_ResourceIDTerminalRuleCall_0_2_1_0_1; }

		//"with"
		public Keyword getWithKeyword_0_3() { return cWithKeyword_0_3; }

		//value=NUMBER
		public Assignment getValueAssignment_0_4() { return cValueAssignment_0_4; }

		//NUMBER
		public RuleCall getValueNUMBERParserRuleCall_0_4_0() { return cValueNUMBERParserRuleCall_0_4_0; }

		//"use" ref+=[DSL_Resource] ("," ref+=[DSL_Resource])* "with" ("W" | "N" | "E" | "U") "(" param1=NUMBER "," param2=NUMBER
		//")"
		public Group getGroup_1() { return cGroup_1; }

		//"use"
		public Keyword getUseKeyword_1_0() { return cUseKeyword_1_0; }

		//ref+=[DSL_Resource]
		public Assignment getRefAssignment_1_1() { return cRefAssignment_1_1; }

		//[DSL_Resource]
		public CrossReference getRefDSL_ResourceCrossReference_1_1_0() { return cRefDSL_ResourceCrossReference_1_1_0; }

		//ID
		public RuleCall getRefDSL_ResourceIDTerminalRuleCall_1_1_0_1() { return cRefDSL_ResourceIDTerminalRuleCall_1_1_0_1; }

		//("," ref+=[DSL_Resource])*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//ref+=[DSL_Resource]
		public Assignment getRefAssignment_1_2_1() { return cRefAssignment_1_2_1; }

		//[DSL_Resource]
		public CrossReference getRefDSL_ResourceCrossReference_1_2_1_0() { return cRefDSL_ResourceCrossReference_1_2_1_0; }

		//ID
		public RuleCall getRefDSL_ResourceIDTerminalRuleCall_1_2_1_0_1() { return cRefDSL_ResourceIDTerminalRuleCall_1_2_1_0_1; }

		//"with"
		public Keyword getWithKeyword_1_3() { return cWithKeyword_1_3; }

		//"W" | "N" | "E" | "U"
		public Alternatives getAlternatives_1_4() { return cAlternatives_1_4; }

		//"W"
		public Keyword getWKeyword_1_4_0() { return cWKeyword_1_4_0; }

		//"N"
		public Keyword getNKeyword_1_4_1() { return cNKeyword_1_4_1; }

		//"E"
		public Keyword getEKeyword_1_4_2() { return cEKeyword_1_4_2; }

		//"U"
		public Keyword getUKeyword_1_4_3() { return cUKeyword_1_4_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_5() { return cLeftParenthesisKeyword_1_5; }

		//param1=NUMBER
		public Assignment getParam1Assignment_1_6() { return cParam1Assignment_1_6; }

		//NUMBER
		public RuleCall getParam1NUMBERParserRuleCall_1_6_0() { return cParam1NUMBERParserRuleCall_1_6_0; }

		//","
		public Keyword getCommaKeyword_1_7() { return cCommaKeyword_1_7; }

		//param2=NUMBER
		public Assignment getParam2Assignment_1_8() { return cParam2Assignment_1_8; }

		//NUMBER
		public RuleCall getParam2NUMBERParserRuleCall_1_8_0() { return cParam2NUMBERParserRuleCall_1_8_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_9() { return cRightParenthesisKeyword_1_9; }
	}

	public class DSL_FLAG_AUTOSTARTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DSL_FLAG_AUTOSTART");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAutostartKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActivatedAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActivatedBOOLEANTerminalRuleCall_3_0 = (RuleCall)cActivatedAssignment_3.eContents().get(0);
		
		//DSL_FLAG_AUTOSTART:
		//	"option" "autostart" "=" activated=BOOLEAN;
		public ParserRule getRule() { return rule; }

		//"option" "autostart" "=" activated=BOOLEAN
		public Group getGroup() { return cGroup; }

		//"option"
		public Keyword getOptionKeyword_0() { return cOptionKeyword_0; }

		//"autostart"
		public Keyword getAutostartKeyword_1() { return cAutostartKeyword_1; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//activated=BOOLEAN
		public Assignment getActivatedAssignment_3() { return cActivatedAssignment_3; }

		//BOOLEAN
		public RuleCall getActivatedBOOLEANTerminalRuleCall_3_0() { return cActivatedBOOLEANTerminalRuleCall_3_0; }
	}

	public class DSL_ResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DSL_Resource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cGatewayIDAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGatewayIDEXTENDED_IDParserRuleCall_4_0 = (RuleCall)cGatewayIDAssignment_4.eContents().get(0);
		private final Keyword cSolidusKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDeviceIDAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDeviceIDEXTENDED_IDParserRuleCall_6_0 = (RuleCall)cDeviceIDAssignment_6.eContents().get(0);
		private final Keyword cSolidusKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cServiceIDAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cServiceIDEXTENDED_IDParserRuleCall_8_0 = (RuleCall)cServiceIDAssignment_8.eContents().get(0);
		private final Keyword cSolidusKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cResourceIDAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cResourceIDEXTENDED_IDParserRuleCall_10_0 = (RuleCall)cResourceIDAssignment_10.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//DSL_Resource:
		//	"resource" name=ID "=" "[" gatewayID=EXTENDED_ID "/" deviceID=EXTENDED_ID "/" serviceID=EXTENDED_ID "/"
		//	resourceID=EXTENDED_ID "]";
		public ParserRule getRule() { return rule; }

		//"resource" name=ID "=" "[" gatewayID=EXTENDED_ID "/" deviceID=EXTENDED_ID "/" serviceID=EXTENDED_ID "/"
		//resourceID=EXTENDED_ID "]"
		public Group getGroup() { return cGroup; }

		//"resource"
		public Keyword getResourceKeyword_0() { return cResourceKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }

		//gatewayID=EXTENDED_ID
		public Assignment getGatewayIDAssignment_4() { return cGatewayIDAssignment_4; }

		//EXTENDED_ID
		public RuleCall getGatewayIDEXTENDED_IDParserRuleCall_4_0() { return cGatewayIDEXTENDED_IDParserRuleCall_4_0; }

		//"/"
		public Keyword getSolidusKeyword_5() { return cSolidusKeyword_5; }

		//deviceID=EXTENDED_ID
		public Assignment getDeviceIDAssignment_6() { return cDeviceIDAssignment_6; }

		//EXTENDED_ID
		public RuleCall getDeviceIDEXTENDED_IDParserRuleCall_6_0() { return cDeviceIDEXTENDED_IDParserRuleCall_6_0; }

		//"/"
		public Keyword getSolidusKeyword_7() { return cSolidusKeyword_7; }

		//serviceID=EXTENDED_ID
		public Assignment getServiceIDAssignment_8() { return cServiceIDAssignment_8; }

		//EXTENDED_ID
		public RuleCall getServiceIDEXTENDED_IDParserRuleCall_8_0() { return cServiceIDEXTENDED_IDParserRuleCall_8_0; }

		//"/"
		public Keyword getSolidusKeyword_9() { return cSolidusKeyword_9; }

		//resourceID=EXTENDED_ID
		public Assignment getResourceIDAssignment_10() { return cResourceIDAssignment_10; }

		//EXTENDED_ID
		public RuleCall getResourceIDEXTENDED_IDParserRuleCall_10_0() { return cResourceIDEXTENDED_IDParserRuleCall_10_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_11() { return cRightSquareBracketKeyword_11; }
	}

	public class DSL_OnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DSL_On");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTriggersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTriggersDSL_REF_CONDITIONParserRuleCall_1_0 = (RuleCall)cTriggersAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTriggersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTriggersDSL_REF_CONDITIONParserRuleCall_2_1_0 = (RuleCall)cTriggersAssignment_2_1.eContents().get(0);
		
		//DSL_On:
		//	"on" triggers+=DSL_REF_CONDITION ("," triggers+=DSL_REF_CONDITION)*;
		public ParserRule getRule() { return rule; }

		//"on" triggers+=DSL_REF_CONDITION ("," triggers+=DSL_REF_CONDITION)*
		public Group getGroup() { return cGroup; }

		//"on"
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }

		//triggers+=DSL_REF_CONDITION
		public Assignment getTriggersAssignment_1() { return cTriggersAssignment_1; }

		//DSL_REF_CONDITION
		public RuleCall getTriggersDSL_REF_CONDITIONParserRuleCall_1_0() { return cTriggersDSL_REF_CONDITIONParserRuleCall_1_0; }

		//("," triggers+=DSL_REF_CONDITION)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//triggers+=DSL_REF_CONDITION
		public Assignment getTriggersAssignment_2_1() { return cTriggersAssignment_2_1; }

		//DSL_REF_CONDITION
		public RuleCall getTriggersDSL_REF_CONDITIONParserRuleCall_2_1_0() { return cTriggersDSL_REF_CONDITIONParserRuleCall_2_1_0; }
	}

	public class DSL_ECA_STATEMENTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DSL_ECA_STATEMENT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIfdoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIfdoDSL_IfDoParserRuleCall_0_0 = (RuleCall)cIfdoAssignment_0.eContents().get(0);
		private final Assignment cElseIfdoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElseIfdoDSL_ElseIfDoParserRuleCall_1_0 = (RuleCall)cElseIfdoAssignment_1.eContents().get(0);
		private final Assignment cElsedoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElsedoDSL_ElseDoParserRuleCall_2_0 = (RuleCall)cElsedoAssignment_2.eContents().get(0);
		private final Keyword cEndIfKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DSL_ECA_STATEMENT:
		//	ifdo=DSL_IfDo elseIfdo+=DSL_ElseIfDo* elsedo=DSL_ElseDo? "end if";
		public ParserRule getRule() { return rule; }

		//ifdo=DSL_IfDo elseIfdo+=DSL_ElseIfDo* elsedo=DSL_ElseDo? "end if"
		public Group getGroup() { return cGroup; }

		//ifdo=DSL_IfDo
		public Assignment getIfdoAssignment_0() { return cIfdoAssignment_0; }

		//DSL_IfDo
		public RuleCall getIfdoDSL_IfDoParserRuleCall_0_0() { return cIfdoDSL_IfDoParserRuleCall_0_0; }

		//elseIfdo+=DSL_ElseIfDo*
		public Assignment getElseIfdoAssignment_1() { return cElseIfdoAssignment_1; }

		//DSL_ElseIfDo
		public RuleCall getElseIfdoDSL_ElseIfDoParserRuleCall_1_0() { return cElseIfdoDSL_ElseIfDoParserRuleCall_1_0; }

		//elsedo=DSL_ElseDo?
		public Assignment getElsedoAssignment_2() { return cElsedoAssignment_2; }

		//DSL_ElseDo
		public RuleCall getElsedoDSL_ElseDoParserRuleCall_2_0() { return cElsedoDSL_ElseDoParserRuleCall_2_0; }

		//"end if"
		public Keyword getEndIfKeyword_3() { return cEndIfKeyword_3; }
	}

	public class DSL_IfDoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DSL_IfDo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionDSL_Expression_OrParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionsDSL_ListActionsParserRuleCall_3_0 = (RuleCall)cActionsAssignment_3.eContents().get(0);
		
		//DSL_IfDo:
		//	"if" condition=DSL_Expression_Or "do" actions=DSL_ListActions;
		public ParserRule getRule() { return rule; }

		//"if" condition=DSL_Expression_Or "do" actions=DSL_ListActions
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//condition=DSL_Expression_Or
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//DSL_Expression_Or
		public RuleCall getConditionDSL_Expression_OrParserRuleCall_1_0() { return cConditionDSL_Expression_OrParserRuleCall_1_0; }

		//"do"
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }

		//actions=DSL_ListActions
		public Assignment getActionsAssignment_3() { return cActionsAssignment_3; }

		//DSL_ListActions
		public RuleCall getActionsDSL_ListActionsParserRuleCall_3_0() { return cActionsDSL_ListActionsParserRuleCall_3_0; }
	}

	public class DSL_ElseIfDoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DSL_ElseIfDo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElseIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionDSL_Expression_OrParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionsDSL_ListActionsParserRuleCall_3_0 = (RuleCall)cActionsAssignment_3.eContents().get(0);
		
		//DSL_ElseIfDo:
		//	"else if" condition=DSL_Expression_Or "do" actions=DSL_ListActions;
		public ParserRule getRule() { return rule; }

		//"else if" condition=DSL_Expression_Or "do" actions=DSL_ListActions
		public Group getGroup() { return cGroup; }

		//"else if"
		public Keyword getElseIfKeyword_0() { return cElseIfKeyword_0; }

		//condition=DSL_Expression_Or
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//DSL_Expression_Or
		public RuleCall getConditionDSL_Expression_OrParserRuleCall_1_0() { return cConditionDSL_Expression_OrParserRuleCall_1_0; }

		//"do"
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }

		//actions=DSL_ListActions
		public Assignment getActionsAssignment_3() { return cActionsAssignment_3; }

		//DSL_ListActions
		public RuleCall getActionsDSL_ListActionsParserRuleCall_3_0() { return cActionsDSL_ListActionsParserRuleCall_3_0; }
	}

	public class DSL_ElseDoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DSL_ElseDo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElseDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionsDSL_ListActionsParserRuleCall_1_0 = (RuleCall)cActionsAssignment_1.eContents().get(0);
		
		//DSL_ElseDo:
		//	"else do" actions=DSL_ListActions;
		public ParserRule getRule() { return rule; }

		//"else do" actions=DSL_ListActions
		public Group getGroup() { return cGroup; }

		//"else do"
		public Keyword getElseDoKeyword_0() { return cElseDoKeyword_0; }

		//actions=DSL_ListActions
		public Assignment getActionsAssignment_1() { return cActionsAssignment_1; }

		//DSL_ListActions
		public RuleCall getActionsDSL_ListActionsParserRuleCall_1_0() { return cActionsDSL_ListActionsParserRuleCall_1_0; }
	}

	public class NUMBERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//NUMBER returns ecore::EBigDecimal:
		//	INT | INT "." INT;
		public ParserRule getRule() { return rule; }

		//INT | INT "." INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//INT "." INT
		public Group getGroup_1() { return cGroup_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_2() { return cINTTerminalRuleCall_1_2; }
	}

	public class EXTENDED_IDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EXTENDED_ID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//EXTENDED_ID:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class DSL_REFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DSL_REF");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDSL_CEP_STATEMENTParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDSL_ResourceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// ================
		//// Basic structures 
		//// ================
		//DSL_REF:
		//	DSL_CEP_STATEMENT | DSL_Resource;
		public ParserRule getRule() { return rule; }

		//DSL_CEP_STATEMENT | DSL_Resource
		public Alternatives getAlternatives() { return cAlternatives; }

		//DSL_CEP_STATEMENT
		public RuleCall getDSL_CEP_STATEMENTParserRuleCall_0() { return cDSL_CEP_STATEMENTParserRuleCall_0; }

		//DSL_Resource
		public RuleCall getDSL_ResourceParserRuleCall_1() { return cDSL_ResourceParserRuleCall_1; }
	}

	public class DSL_REF_CONDITIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DSL_REF_CONDITION");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefDSL_REFCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefDSL_REFIDTerminalRuleCall_0_0_1 = (RuleCall)cRefDSL_REFCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSubscribeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// =============
		//// REF condition
		//// =============
		//DSL_REF_CONDITION:
		//	ref=[DSL_REF] "." "subscribe" "(" ")";
		public ParserRule getRule() { return rule; }

		//ref=[DSL_REF] "." "subscribe" "(" ")"
		public Group getGroup() { return cGroup; }

		//ref=[DSL_REF]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }

		//[DSL_REF]
		public CrossReference getRefDSL_REFCrossReference_0_0() { return cRefDSL_REFCrossReference_0_0; }

		//ID
		public RuleCall getRefDSL_REFIDTerminalRuleCall_0_0_1() { return cRefDSL_REFIDTerminalRuleCall_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//"subscribe"
		public Keyword getSubscribeKeyword_2() { return cSubscribeKeyword_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class DSL_CEP_STATEMENTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DSL_CEP_STATEMENT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cOperationAlternatives_3_0 = (Alternatives)cOperationAssignment_3.eContents().get(0);
		private final RuleCall cOperationDSL_CEP_AFTERParserRuleCall_3_0_0 = (RuleCall)cOperationAlternatives_3_0.eContents().get(0);
		private final RuleCall cOperationDSL_CEP_BEFOREParserRuleCall_3_0_1 = (RuleCall)cOperationAlternatives_3_0.eContents().get(1);
		private final RuleCall cOperationDSL_CEP_COINCIDEParserRuleCall_3_0_2 = (RuleCall)cOperationAlternatives_3_0.eContents().get(2);
		private final RuleCall cOperationDSL_CEP_MINParserRuleCall_3_0_3 = (RuleCall)cOperationAlternatives_3_0.eContents().get(3);
		private final RuleCall cOperationDSL_CEP_MAXParserRuleCall_3_0_4 = (RuleCall)cOperationAlternatives_3_0.eContents().get(4);
		private final RuleCall cOperationDSL_CEP_AVGParserRuleCall_3_0_5 = (RuleCall)cOperationAlternatives_3_0.eContents().get(5);
		private final RuleCall cOperationDSL_CEP_SUMParserRuleCall_3_0_6 = (RuleCall)cOperationAlternatives_3_0.eContents().get(6);
		private final RuleCall cOperationDSL_CEP_COUNTParserRuleCall_3_0_7 = (RuleCall)cOperationAlternatives_3_0.eContents().get(7);
		
		//// ==========
		//// CEP engine
		//// ==========
		//DSL_CEP_STATEMENT:
		//	"define" name=ID "=" operation=(DSL_CEP_AFTER | DSL_CEP_BEFORE | DSL_CEP_COINCIDE | DSL_CEP_MIN | DSL_CEP_MAX |
		//	DSL_CEP_AVG | DSL_CEP_SUM | DSL_CEP_COUNT);
		public ParserRule getRule() { return rule; }

		//"define" name=ID "=" operation=(DSL_CEP_AFTER | DSL_CEP_BEFORE | DSL_CEP_COINCIDE | DSL_CEP_MIN | DSL_CEP_MAX |
		//DSL_CEP_AVG | DSL_CEP_SUM | DSL_CEP_COUNT)
		public Group getGroup() { return cGroup; }

		//"define"
		public Keyword getDefineKeyword_0() { return cDefineKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//operation=(DSL_CEP_AFTER | DSL_CEP_BEFORE | DSL_CEP_COINCIDE | DSL_CEP_MIN | DSL_CEP_MAX | DSL_CEP_AVG | DSL_CEP_SUM |
		//DSL_CEP_COUNT)
		public Assignment getOperationAssignment_3() { return cOperationAssignment_3; }

		//DSL_CEP_AFTER | DSL_CEP_BEFORE | DSL_CEP_COINCIDE | DSL_CEP_MIN | DSL_CEP_MAX | DSL_CEP_AVG | DSL_CEP_SUM |
		//DSL_CEP_COUNT
		public Alternatives getOperationAlternatives_3_0() { return cOperationAlternatives_3_0; }

		//DSL_CEP_AFTER
		public RuleCall getOperationDSL_CEP_AFTERParserRuleCall_3_0_0() { return cOperationDSL_CEP_AFTERParserRuleCall_3_0_0; }

		//DSL_CEP_BEFORE
		public RuleCall getOperationDSL_CEP_BEFOREParserRuleCall_3_0_1() { return cOperationDSL_CEP_BEFOREParserRuleCall_3_0_1; }

		//DSL_CEP_COINCIDE
		public RuleCall getOperationDSL_CEP_COINCIDEParserRuleCall_3_0_2() { return cOperationDSL_CEP_COINCIDEParserRuleCall_3_0_2; }

		//DSL_CEP_MIN
		public RuleCall getOperationDSL_CEP_MINParserRuleCall_3_0_3() { return cOperationDSL_CEP_MINParserRuleCall_3_0_3; }

		//DSL_CEP_MAX
		public RuleCall getOperationDSL_CEP_MAXParserRuleCall_3_0_4() { return cOperationDSL_CEP_MAXParserRuleCall_3_0_4; }

		//DSL_CEP_AVG
		public RuleCall getOperationDSL_CEP_AVGParserRuleCall_3_0_5() { return cOperationDSL_CEP_AVGParserRuleCall_3_0_5; }

		//DSL_CEP_SUM
		public RuleCall getOperationDSL_CEP_SUMParserRuleCall_3_0_6() { return cOperationDSL_CEP_SUMParserRuleCall_3_0_6; }

		//DSL_CEP_COUNT
		public RuleCall getOperationDSL_CEP_COUNTParserRuleCall_3_0_7() { return cOperationDSL_CEP_COUNTParserRuleCall_3_0_7; }
	}

	public class DSL_CEP_AFTERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DSL_CEP_AFTER");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAfterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRef1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRef1DSL_REF_CONDITIONParserRuleCall_2_0 = (RuleCall)cRef1Assignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRef2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRef2DSL_REF_CONDITIONParserRuleCall_4_0 = (RuleCall)cRef2Assignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cStartAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cStartDSL_CEP_DURATIONParserRuleCall_6_0_0 = (RuleCall)cStartAssignment_6_0.eContents().get(0);
		private final Keyword cCommaKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cEndAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cEndDSL_CEP_DURATIONParserRuleCall_7_0 = (RuleCall)cEndAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//DSL_CEP_AFTER:
		//	"after" "(" ref1=DSL_REF_CONDITION "," ref2=DSL_REF_CONDITION "," (start=DSL_CEP_DURATION ",")? end=DSL_CEP_DURATION
		//	")";
		public ParserRule getRule() { return rule; }

		//"after" "(" ref1=DSL_REF_CONDITION "," ref2=DSL_REF_CONDITION "," (start=DSL_CEP_DURATION ",")? end=DSL_CEP_DURATION ")"
		public Group getGroup() { return cGroup; }

		//"after"
		public Keyword getAfterKeyword_0() { return cAfterKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ref1=DSL_REF_CONDITION
		public Assignment getRef1Assignment_2() { return cRef1Assignment_2; }

		//DSL_REF_CONDITION
		public RuleCall getRef1DSL_REF_CONDITIONParserRuleCall_2_0() { return cRef1DSL_REF_CONDITIONParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//ref2=DSL_REF_CONDITION
		public Assignment getRef2Assignment_4() { return cRef2Assignment_4; }

		//DSL_REF_CONDITION
		public RuleCall getRef2DSL_REF_CONDITIONParserRuleCall_4_0() { return cRef2DSL_REF_CONDITIONParserRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//(start=DSL_CEP_DURATION ",")?
		public Group getGroup_6() { return cGroup_6; }

		//start=DSL_CEP_DURATION
		public Assignment getStartAssignment_6_0() { return cStartAssignment_6_0; }

		//DSL_CEP_DURATION
		public RuleCall getStartDSL_CEP_DURATIONParserRuleCall_6_0_0() { return cStartDSL_CEP_DURATIONParserRuleCall_6_0_0; }

		//","
		public Keyword getCommaKeyword_6_1() { return cCommaKeyword_6_1; }

		//end=DSL_CEP_DURATION
		public Assignment getEndAssignment_7() { return cEndAssignment_7; }

		//DSL_CEP_DURATION
		public RuleCall getEndDSL_CEP_DURATIONParserRuleCall_7_0() { return cEndDSL_CEP_DURATIONParserRuleCall_7_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}

	public class DSL_CEP_BEFOREElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DSL_CEP_BEFORE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBeforeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRef1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRef1DSL_REF_CONDITIONParserRuleCall_2_0 = (RuleCall)cRef1Assignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRef2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRef2DSL_REF_CONDITIONParserRuleCall_4_0 = (RuleCall)cRef2Assignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cStartAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cStartDSL_CEP_DURATIONParserRuleCall_6_0_0 = (RuleCall)cStartAssignment_6_0.eContents().get(0);
		private final Keyword cCommaKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cEndAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cEndDSL_CEP_DURATIONParserRuleCall_7_0 = (RuleCall)cEndAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//DSL_CEP_BEFORE:
		//	"before" "(" ref1=DSL_REF_CONDITION "," ref2=DSL_REF_CONDITION "," (start=DSL_CEP_DURATION ",")? end=DSL_CEP_DURATION
		//	")";
		public ParserRule getRule() { return rule; }

		//"before" "(" ref1=DSL_REF_CONDITION "," ref2=DSL_REF_CONDITION "," (start=DSL_CEP_DURATION ",")? end=DSL_CEP_DURATION
		//")"
		public Group getGroup() { return cGroup; }

		//"before"
		public Keyword getBeforeKeyword_0() { return cBeforeKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ref1=DSL_REF_CONDITION
		public Assignment getRef1Assignment_2() { return cRef1Assignment_2; }

		//DSL_REF_CONDITION
		public RuleCall getRef1DSL_REF_CONDITIONParserRuleCall_2_0() { return cRef1DSL_REF_CONDITIONParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//ref2=DSL_REF_CONDITION
		public Assignment getRef2Assignment_4() { return cRef2Assignment_4; }

		//DSL_REF_CONDITION
		public RuleCall getRef2DSL_REF_CONDITIONParserRuleCall_4_0() { return cRef2DSL_REF_CONDITIONParserRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//(start=DSL_CEP_DURATION ",")?
		public Group getGroup_6() { return cGroup_6; }

		//start=DSL_CEP_DURATION
		public Assignment getStartAssignment_6_0() { return cStartAssignment_6_0; }

		//DSL_CEP_DURATION
		public RuleCall getStartDSL_CEP_DURATIONParserRuleCall_6_0_0() { return cStartDSL_CEP_DURATIONParserRuleCall_6_0_0; }

		//","
		public Keyword getCommaKeyword_6_1() { return cCommaKeyword_6_1; }

		//end=DSL_CEP_DURATION
		public Assignment getEndAssignment_7() { return cEndAssignment_7; }

		//DSL_CEP_DURATION
		public RuleCall getEndDSL_CEP_DURATIONParserRuleCall_7_0() { return cEndDSL_CEP_DURATIONParserRuleCall_7_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}

	public class DSL_CEP_COINCIDEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DSL_CEP_COINCIDE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCoincideKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRef1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRef1DSL_REF_CONDITIONParserRuleCall_2_0 = (RuleCall)cRef1Assignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRef2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRef2DSL_REF_CONDITIONParserRuleCall_4_0 = (RuleCall)cRef2Assignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cWindowAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cWindowDSL_CEP_DURATIONParserRuleCall_6_0 = (RuleCall)cWindowAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//DSL_CEP_COINCIDE:
		//	"coincide" "(" ref1=DSL_REF_CONDITION "," ref2=DSL_REF_CONDITION "," window=DSL_CEP_DURATION ")";
		public ParserRule getRule() { return rule; }

		//"coincide" "(" ref1=DSL_REF_CONDITION "," ref2=DSL_REF_CONDITION "," window=DSL_CEP_DURATION ")"
		public Group getGroup() { return cGroup; }

		//"coincide"
		public Keyword getCoincideKeyword_0() { return cCoincideKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ref1=DSL_REF_CONDITION
		public Assignment getRef1Assignment_2() { return cRef1Assignment_2; }

		//DSL_REF_CONDITION
		public RuleCall getRef1DSL_REF_CONDITIONParserRuleCall_2_0() { return cRef1DSL_REF_CONDITIONParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//ref2=DSL_REF_CONDITION
		public Assignment getRef2Assignment_4() { return cRef2Assignment_4; }

		//DSL_REF_CONDITION
		public RuleCall getRef2DSL_REF_CONDITIONParserRuleCall_4_0() { return cRef2DSL_REF_CONDITIONParserRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//window=DSL_CEP_DURATION
		public Assignment getWindowAssignment_6() { return cWindowAssignment_6; }

		//DSL_CEP_DURATION
		public RuleCall getWindowDSL_CEP_DURATIONParserRuleCall_6_0() { return cWindowDSL_CEP_DURATIONParserRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class DSL_CEP_MINElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DSL_CEP_MIN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMinKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRefDSL_REF_CONDITIONParserRuleCall_2_0 = (RuleCall)cRefAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cWindowAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cWindowDSL_CEP_DURATIONParserRuleCall_4_0 = (RuleCall)cWindowAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DSL_CEP_MIN:
		//	"min" "(" ref=DSL_REF_CONDITION "," window=DSL_CEP_DURATION ")";
		public ParserRule getRule() { return rule; }

		//"min" "(" ref=DSL_REF_CONDITION "," window=DSL_CEP_DURATION ")"
		public Group getGroup() { return cGroup; }

		//"min"
		public Keyword getMinKeyword_0() { return cMinKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ref=DSL_REF_CONDITION
		public Assignment getRefAssignment_2() { return cRefAssignment_2; }

		//DSL_REF_CONDITION
		public RuleCall getRefDSL_REF_CONDITIONParserRuleCall_2_0() { return cRefDSL_REF_CONDITIONParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//window=DSL_CEP_DURATION
		public Assignment getWindowAssignment_4() { return cWindowAssignment_4; }

		//DSL_CEP_DURATION
		public RuleCall getWindowDSL_CEP_DURATIONParserRuleCall_4_0() { return cWindowDSL_CEP_DURATIONParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class DSL_CEP_MAXElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DSL_CEP_MAX");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMaxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRefDSL_REF_CONDITIONParserRuleCall_2_0 = (RuleCall)cRefAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cWindowAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cWindowDSL_CEP_DURATIONParserRuleCall_4_0 = (RuleCall)cWindowAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DSL_CEP_MAX:
		//	"max" "(" ref=DSL_REF_CONDITION "," window=DSL_CEP_DURATION ")";
		public ParserRule getRule() { return rule; }

		//"max" "(" ref=DSL_REF_CONDITION "," window=DSL_CEP_DURATION ")"
		public Group getGroup() { return cGroup; }

		//"max"
		public Keyword getMaxKeyword_0() { return cMaxKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ref=DSL_REF_CONDITION
		public Assignment getRefAssignment_2() { return cRefAssignment_2; }

		//DSL_REF_CONDITION
		public RuleCall getRefDSL_REF_CONDITIONParserRuleCall_2_0() { return cRefDSL_REF_CONDITIONParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//window=DSL_CEP_DURATION
		public Assignment getWindowAssignment_4() { return cWindowAssignment_4; }

		//DSL_CEP_DURATION
		public RuleCall getWindowDSL_CEP_DURATIONParserRuleCall_4_0() { return cWindowDSL_CEP_DURATIONParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class DSL_CEP_AVGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DSL_CEP_AVG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAvgKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRefDSL_REF_CONDITIONParserRuleCall_2_0 = (RuleCall)cRefAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cWindowAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cWindowDSL_CEP_DURATIONParserRuleCall_4_0 = (RuleCall)cWindowAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DSL_CEP_AVG:
		//	"avg" "(" ref=DSL_REF_CONDITION "," window=DSL_CEP_DURATION ")";
		public ParserRule getRule() { return rule; }

		//"avg" "(" ref=DSL_REF_CONDITION "," window=DSL_CEP_DURATION ")"
		public Group getGroup() { return cGroup; }

		//"avg"
		public Keyword getAvgKeyword_0() { return cAvgKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ref=DSL_REF_CONDITION
		public Assignment getRefAssignment_2() { return cRefAssignment_2; }

		//DSL_REF_CONDITION
		public RuleCall getRefDSL_REF_CONDITIONParserRuleCall_2_0() { return cRefDSL_REF_CONDITIONParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//window=DSL_CEP_DURATION
		public Assignment getWindowAssignment_4() { return cWindowAssignment_4; }

		//DSL_CEP_DURATION
		public RuleCall getWindowDSL_CEP_DURATIONParserRuleCall_4_0() { return cWindowDSL_CEP_DURATIONParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class DSL_CEP_SUMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DSL_CEP_SUM");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRefDSL_REF_CONDITIONParserRuleCall_2_0 = (RuleCall)cRefAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cWindowAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cWindowDSL_CEP_DURATIONParserRuleCall_4_0 = (RuleCall)cWindowAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DSL_CEP_SUM:
		//	"sum" "(" ref=DSL_REF_CONDITION "," window=DSL_CEP_DURATION ")";
		public ParserRule getRule() { return rule; }

		//"sum" "(" ref=DSL_REF_CONDITION "," window=DSL_CEP_DURATION ")"
		public Group getGroup() { return cGroup; }

		//"sum"
		public Keyword getSumKeyword_0() { return cSumKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ref=DSL_REF_CONDITION
		public Assignment getRefAssignment_2() { return cRefAssignment_2; }

		//DSL_REF_CONDITION
		public RuleCall getRefDSL_REF_CONDITIONParserRuleCall_2_0() { return cRefDSL_REF_CONDITIONParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//window=DSL_CEP_DURATION
		public Assignment getWindowAssignment_4() { return cWindowAssignment_4; }

		//DSL_CEP_DURATION
		public RuleCall getWindowDSL_CEP_DURATIONParserRuleCall_4_0() { return cWindowDSL_CEP_DURATIONParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class DSL_CEP_COUNTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DSL_CEP_COUNT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCountKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRefDSL_REF_CONDITIONParserRuleCall_2_0 = (RuleCall)cRefAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cWindowAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cWindowDSL_CEP_DURATIONParserRuleCall_4_0 = (RuleCall)cWindowAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DSL_CEP_COUNT:
		//	"count" "(" ref=DSL_REF_CONDITION "," window=DSL_CEP_DURATION ")";
		public ParserRule getRule() { return rule; }

		//"count" "(" ref=DSL_REF_CONDITION "," window=DSL_CEP_DURATION ")"
		public Group getGroup() { return cGroup; }

		//"count"
		public Keyword getCountKeyword_0() { return cCountKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ref=DSL_REF_CONDITION
		public Assignment getRefAssignment_2() { return cRefAssignment_2; }

		//DSL_REF_CONDITION
		public RuleCall getRefDSL_REF_CONDITIONParserRuleCall_2_0() { return cRefDSL_REF_CONDITIONParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//window=DSL_CEP_DURATION
		public Assignment getWindowAssignment_4() { return cWindowAssignment_4; }

		//DSL_CEP_DURATION
		public RuleCall getWindowDSL_CEP_DURATIONParserRuleCall_4_0() { return cWindowDSL_CEP_DURATIONParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class DSL_CEP_DURATIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DSL_CEP_DURATION");
		private final Assignment cUnitsAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cUnitsAlternatives_0 = (Alternatives)cUnitsAssignment.eContents().get(0);
		private final RuleCall cUnitsDSL_CEP_DURATION_MINParserRuleCall_0_0 = (RuleCall)cUnitsAlternatives_0.eContents().get(0);
		private final RuleCall cUnitsDSL_CEP_DURATION_SECParserRuleCall_0_1 = (RuleCall)cUnitsAlternatives_0.eContents().get(1);
		
		//DSL_CEP_DURATION:
		//	units+=(DSL_CEP_DURATION_MIN | DSL_CEP_DURATION_SEC)+;
		public ParserRule getRule() { return rule; }

		//units+=(DSL_CEP_DURATION_MIN | DSL_CEP_DURATION_SEC)+
		public Assignment getUnitsAssignment() { return cUnitsAssignment; }

		//DSL_CEP_DURATION_MIN | DSL_CEP_DURATION_SEC
		public Alternatives getUnitsAlternatives_0() { return cUnitsAlternatives_0; }

		//DSL_CEP_DURATION_MIN
		public RuleCall getUnitsDSL_CEP_DURATION_MINParserRuleCall_0_0() { return cUnitsDSL_CEP_DURATION_MINParserRuleCall_0_0; }

		//DSL_CEP_DURATION_SEC
		public RuleCall getUnitsDSL_CEP_DURATION_SECParserRuleCall_0_1() { return cUnitsDSL_CEP_DURATION_SECParserRuleCall_0_1; }
	}

	public class DSL_CEP_DURATION_MINElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DSL_CEP_DURATION_MIN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMinAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMinNUMBERParserRuleCall_0_0 = (RuleCall)cMinAssignment_0.eContents().get(0);
		private final Keyword cMinKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//DSL_CEP_DURATION_MIN:
		//	min=NUMBER "min";
		public ParserRule getRule() { return rule; }

		//min=NUMBER "min"
		public Group getGroup() { return cGroup; }

		//min=NUMBER
		public Assignment getMinAssignment_0() { return cMinAssignment_0; }

		//NUMBER
		public RuleCall getMinNUMBERParserRuleCall_0_0() { return cMinNUMBERParserRuleCall_0_0; }

		//"min"
		public Keyword getMinKeyword_1() { return cMinKeyword_1; }
	}

	public class DSL_CEP_DURATION_SECElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DSL_CEP_DURATION_SEC");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSecAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSecNUMBERParserRuleCall_0_0 = (RuleCall)cSecAssignment_0.eContents().get(0);
		private final Keyword cSecKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//DSL_CEP_DURATION_SEC:
		//	sec=NUMBER "sec";
		public ParserRule getRule() { return rule; }

		//sec=NUMBER "sec"
		public Group getGroup() { return cGroup; }

		//sec=NUMBER
		public Assignment getSecAssignment_0() { return cSecAssignment_0; }

		//NUMBER
		public RuleCall getSecNUMBERParserRuleCall_0_0() { return cSecNUMBERParserRuleCall_0_0; }

		//"sec"
		public Keyword getSecKeyword_1() { return cSecKeyword_1; }
	}

	public class DSL_ListActionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DSL_ListActions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActionListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cActionListDSL_ResourceActionParserRuleCall_0_0 = (RuleCall)cActionListAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cActionListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cActionListDSL_ResourceActionParserRuleCall_1_1_0 = (RuleCall)cActionListAssignment_1_1.eContents().get(0);
		
		//// ============================
		//// ECA engine : DSL_ListActions 
		//// ============================
		//DSL_ListActions:
		//	actionList+=DSL_ResourceAction ("," actionList+=DSL_ResourceAction)*;
		public ParserRule getRule() { return rule; }

		//actionList+=DSL_ResourceAction ("," actionList+=DSL_ResourceAction)*
		public Group getGroup() { return cGroup; }

		//actionList+=DSL_ResourceAction
		public Assignment getActionListAssignment_0() { return cActionListAssignment_0; }

		//DSL_ResourceAction
		public RuleCall getActionListDSL_ResourceActionParserRuleCall_0_0() { return cActionListDSL_ResourceActionParserRuleCall_0_0; }

		//("," actionList+=DSL_ResourceAction)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//actionList+=DSL_ResourceAction
		public Assignment getActionListAssignment_1_1() { return cActionListAssignment_1_1; }

		//DSL_ResourceAction
		public RuleCall getActionListDSL_ResourceActionParserRuleCall_1_1_0() { return cActionListDSL_ResourceActionParserRuleCall_1_1_0; }
	}

	public class DSL_ResourceActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DSL_ResourceAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cVariableIDTerminalRuleCall_0_0_0 = (RuleCall)cVariableAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefDSL_REFCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefDSL_REFIDTerminalRuleCall_1_0_1 = (RuleCall)cRefDSL_REFCrossReference_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActiontypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cActiontypeAlternatives_3_0 = (Alternatives)cActiontypeAssignment_3.eContents().get(0);
		private final Keyword cActiontypeActKeyword_3_0_0 = (Keyword)cActiontypeAlternatives_3_0.eContents().get(0);
		private final Keyword cActiontypeSetKeyword_3_0_1 = (Keyword)cActiontypeAlternatives_3_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cListParamAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cListParamDSL_ListParamParserRuleCall_5_0 = (RuleCall)cListParamAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//DSL_ResourceAction:
		//	(variable=ID "=")? ref=[DSL_REF] "." actiontype=("act" | "set") "(" listParam=DSL_ListParam? ")";
		public ParserRule getRule() { return rule; }

		//(variable=ID "=")? ref=[DSL_REF] "." actiontype=("act" | "set") "(" listParam=DSL_ListParam? ")"
		public Group getGroup() { return cGroup; }

		//(variable=ID "=")?
		public Group getGroup_0() { return cGroup_0; }

		//variable=ID
		public Assignment getVariableAssignment_0_0() { return cVariableAssignment_0_0; }

		//ID
		public RuleCall getVariableIDTerminalRuleCall_0_0_0() { return cVariableIDTerminalRuleCall_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//ref=[DSL_REF]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }

		//[DSL_REF]
		public CrossReference getRefDSL_REFCrossReference_1_0() { return cRefDSL_REFCrossReference_1_0; }

		//ID
		public RuleCall getRefDSL_REFIDTerminalRuleCall_1_0_1() { return cRefDSL_REFIDTerminalRuleCall_1_0_1; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//actiontype=("act" | "set")
		public Assignment getActiontypeAssignment_3() { return cActiontypeAssignment_3; }

		//"act" | "set"
		public Alternatives getActiontypeAlternatives_3_0() { return cActiontypeAlternatives_3_0; }

		//"act"
		public Keyword getActiontypeActKeyword_3_0_0() { return cActiontypeActKeyword_3_0_0; }

		//"set"
		public Keyword getActiontypeSetKeyword_3_0_1() { return cActiontypeSetKeyword_3_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//listParam=DSL_ListParam?
		public Assignment getListParamAssignment_5() { return cListParamAssignment_5; }

		//DSL_ListParam
		public RuleCall getListParamDSL_ListParamParserRuleCall_5_0() { return cListParamDSL_ListParamParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class DSL_ListParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DSL_ListParam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParamAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParamDSL_Expression_OrParserRuleCall_0_0 = (RuleCall)cParamAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParamAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParamDSL_Expression_OrParserRuleCall_1_1_0 = (RuleCall)cParamAssignment_1_1.eContents().get(0);
		
		//DSL_ListParam:
		//	param+=DSL_Expression_Or ("," param+=DSL_Expression_Or)*;
		public ParserRule getRule() { return rule; }

		//param+=DSL_Expression_Or ("," param+=DSL_Expression_Or)*
		public Group getGroup() { return cGroup; }

		//param+=DSL_Expression_Or
		public Assignment getParamAssignment_0() { return cParamAssignment_0; }

		//DSL_Expression_Or
		public RuleCall getParamDSL_Expression_OrParserRuleCall_0_0() { return cParamDSL_Expression_OrParserRuleCall_0_0; }

		//("," param+=DSL_Expression_Or)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//param+=DSL_Expression_Or
		public Assignment getParamAssignment_1_1() { return cParamAssignment_1_1; }

		//DSL_Expression_Or
		public RuleCall getParamDSL_Expression_OrParserRuleCall_1_1_0() { return cParamDSL_Expression_OrParserRuleCall_1_1_0; }
	}

	public class DSL_Expression_OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DSL_Expression_Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDSL_Expression_AndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cOrKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cDSL_Expression_OrLeftAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightDSL_Expression_AndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// ===========
		//// Expressions
		//// ===========
		//// 
		//// 7  ()   functions : not, concatenate 
		//// 6  *    /    %
		//// 5  +    -
		//// 4  <    >    <=   >=
		//// 3  ==   !=
		//// 2  and
		//// 1  or
		//// 
		//// Or: left associative, priority 1
		//DSL_Expression_Or returns DSL_Expression:
		//	DSL_Expression_And ("or" {DSL_Expression_Or.left=current} right=DSL_Expression_And)*;
		public ParserRule getRule() { return rule; }

		//DSL_Expression_And ("or" {DSL_Expression_Or.left=current} right=DSL_Expression_And)*
		public Group getGroup() { return cGroup; }

		//DSL_Expression_And
		public RuleCall getDSL_Expression_AndParserRuleCall_0() { return cDSL_Expression_AndParserRuleCall_0; }

		//("or" {DSL_Expression_Or.left=current} right=DSL_Expression_And)*
		public Group getGroup_1() { return cGroup_1; }

		//"or"
		public Keyword getOrKeyword_1_0() { return cOrKeyword_1_0; }

		//{DSL_Expression_Or.left=current}
		public Action getDSL_Expression_OrLeftAction_1_1() { return cDSL_Expression_OrLeftAction_1_1; }

		//right=DSL_Expression_And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//DSL_Expression_And
		public RuleCall getRightDSL_Expression_AndParserRuleCall_1_2_0() { return cRightDSL_Expression_AndParserRuleCall_1_2_0; }
	}

	public class DSL_Expression_AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DSL_Expression_And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDSL_Expression_DiffEqualParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cDSL_Expression_AndLeftAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightDSL_Expression_DiffEqualParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// And: left associative, priority 2
		//DSL_Expression_And returns DSL_Expression:
		//	DSL_Expression_DiffEqual ("and" {DSL_Expression_And.left=current} right=DSL_Expression_DiffEqual)*;
		public ParserRule getRule() { return rule; }

		//DSL_Expression_DiffEqual ("and" {DSL_Expression_And.left=current} right=DSL_Expression_DiffEqual)*
		public Group getGroup() { return cGroup; }

		//DSL_Expression_DiffEqual
		public RuleCall getDSL_Expression_DiffEqualParserRuleCall_0() { return cDSL_Expression_DiffEqualParserRuleCall_0; }

		//("and" {DSL_Expression_And.left=current} right=DSL_Expression_DiffEqual)*
		public Group getGroup_1() { return cGroup_1; }

		//"and"
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }

		//{DSL_Expression_And.left=current}
		public Action getDSL_Expression_AndLeftAction_1_1() { return cDSL_Expression_AndLeftAction_1_1; }

		//right=DSL_Expression_DiffEqual
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//DSL_Expression_DiffEqual
		public RuleCall getRightDSL_Expression_DiffEqualParserRuleCall_1_2_0() { return cRightDSL_Expression_DiffEqualParserRuleCall_1_2_0; }
	}

	public class DSL_Expression_DiffEqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DSL_Expression_DiffEqual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDSL_Expression_CompareParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Action cDSL_Expression_DiffLeftAction_1_0_1 = (Action)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightDSL_Expression_CompareParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Action cDSL_Expression_EqualLeftAction_1_1_1 = (Action)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightDSL_Expression_CompareParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//// different/equal: left associative, priority 3
		//DSL_Expression_DiffEqual returns DSL_Expression:
		//	DSL_Expression_Compare ("!=" {DSL_Expression_Diff.left=current} right=DSL_Expression_Compare | "=="
		//	{DSL_Expression_Equal.left=current} right=DSL_Expression_Compare)*;
		public ParserRule getRule() { return rule; }

		//DSL_Expression_Compare ("!=" {DSL_Expression_Diff.left=current} right=DSL_Expression_Compare | "=="
		//{DSL_Expression_Equal.left=current} right=DSL_Expression_Compare)*
		public Group getGroup() { return cGroup; }

		//DSL_Expression_Compare
		public RuleCall getDSL_Expression_CompareParserRuleCall_0() { return cDSL_Expression_CompareParserRuleCall_0; }

		//("!=" {DSL_Expression_Diff.left=current} right=DSL_Expression_Compare | "==" {DSL_Expression_Equal.left=current}
		//right=DSL_Expression_Compare)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"!=" {DSL_Expression_Diff.left=current} right=DSL_Expression_Compare
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1_0_0() { return cExclamationMarkEqualsSignKeyword_1_0_0; }

		//{DSL_Expression_Diff.left=current}
		public Action getDSL_Expression_DiffLeftAction_1_0_1() { return cDSL_Expression_DiffLeftAction_1_0_1; }

		//right=DSL_Expression_Compare
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }

		//DSL_Expression_Compare
		public RuleCall getRightDSL_Expression_CompareParserRuleCall_1_0_2_0() { return cRightDSL_Expression_CompareParserRuleCall_1_0_2_0; }

		//"==" {DSL_Expression_Equal.left=current} right=DSL_Expression_Compare
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1_1_0() { return cEqualsSignEqualsSignKeyword_1_1_0; }

		//{DSL_Expression_Equal.left=current}
		public Action getDSL_Expression_EqualLeftAction_1_1_1() { return cDSL_Expression_EqualLeftAction_1_1_1; }

		//right=DSL_Expression_Compare
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }

		//DSL_Expression_Compare
		public RuleCall getRightDSL_Expression_CompareParserRuleCall_1_1_2_0() { return cRightDSL_Expression_CompareParserRuleCall_1_1_2_0; }
	}

	public class DSL_Expression_CompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DSL_Expression_Compare");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDSL_Expression_PlusMinusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Action cDSL_Expression_LargerLeftAction_1_0_1 = (Action)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightDSL_Expression_PlusMinusParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Action cDSL_Expression_Larger_EqualLeftAction_1_1_1 = (Action)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightDSL_Expression_PlusMinusParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cLessThanSignKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Action cDSL_Expression_SmallerLeftAction_1_2_1 = (Action)cGroup_1_2.eContents().get(1);
		private final Assignment cRightAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cRightDSL_Expression_PlusMinusParserRuleCall_1_2_2_0 = (RuleCall)cRightAssignment_1_2_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Keyword cLessThanSignEqualsSignKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Action cDSL_Expression_Smaller_EqualLeftAction_1_3_1 = (Action)cGroup_1_3.eContents().get(1);
		private final Assignment cRightAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cRightDSL_Expression_PlusMinusParserRuleCall_1_3_2_0 = (RuleCall)cRightAssignment_1_3_2.eContents().get(0);
		
		//// Comparisons: left associative, priority 4
		//DSL_Expression_Compare returns DSL_Expression:
		//	DSL_Expression_PlusMinus (">" {DSL_Expression_Larger.left=current} right=DSL_Expression_PlusMinus | ">="
		//	{DSL_Expression_Larger_Equal.left=current} right=DSL_Expression_PlusMinus | "<" {DSL_Expression_Smaller.left=current}
		//	right=DSL_Expression_PlusMinus | "<=" {DSL_Expression_Smaller_Equal.left=current} right=DSL_Expression_PlusMinus)*;
		public ParserRule getRule() { return rule; }

		//DSL_Expression_PlusMinus (">" {DSL_Expression_Larger.left=current} right=DSL_Expression_PlusMinus | ">="
		//{DSL_Expression_Larger_Equal.left=current} right=DSL_Expression_PlusMinus | "<" {DSL_Expression_Smaller.left=current}
		//right=DSL_Expression_PlusMinus | "<=" {DSL_Expression_Smaller_Equal.left=current} right=DSL_Expression_PlusMinus)*
		public Group getGroup() { return cGroup; }

		//DSL_Expression_PlusMinus
		public RuleCall getDSL_Expression_PlusMinusParserRuleCall_0() { return cDSL_Expression_PlusMinusParserRuleCall_0; }

		//(">" {DSL_Expression_Larger.left=current} right=DSL_Expression_PlusMinus | ">="
		//{DSL_Expression_Larger_Equal.left=current} right=DSL_Expression_PlusMinus | "<" {DSL_Expression_Smaller.left=current}
		//right=DSL_Expression_PlusMinus | "<=" {DSL_Expression_Smaller_Equal.left=current} right=DSL_Expression_PlusMinus)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//">" {DSL_Expression_Larger.left=current} right=DSL_Expression_PlusMinus
		public Group getGroup_1_0() { return cGroup_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_0_0() { return cGreaterThanSignKeyword_1_0_0; }

		//{DSL_Expression_Larger.left=current}
		public Action getDSL_Expression_LargerLeftAction_1_0_1() { return cDSL_Expression_LargerLeftAction_1_0_1; }

		//right=DSL_Expression_PlusMinus
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }

		//DSL_Expression_PlusMinus
		public RuleCall getRightDSL_Expression_PlusMinusParserRuleCall_1_0_2_0() { return cRightDSL_Expression_PlusMinusParserRuleCall_1_0_2_0; }

		//">=" {DSL_Expression_Larger_Equal.left=current} right=DSL_Expression_PlusMinus
		public Group getGroup_1_1() { return cGroup_1_1; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_1_1_0() { return cGreaterThanSignEqualsSignKeyword_1_1_0; }

		//{DSL_Expression_Larger_Equal.left=current}
		public Action getDSL_Expression_Larger_EqualLeftAction_1_1_1() { return cDSL_Expression_Larger_EqualLeftAction_1_1_1; }

		//right=DSL_Expression_PlusMinus
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }

		//DSL_Expression_PlusMinus
		public RuleCall getRightDSL_Expression_PlusMinusParserRuleCall_1_1_2_0() { return cRightDSL_Expression_PlusMinusParserRuleCall_1_1_2_0; }

		//"<" {DSL_Expression_Smaller.left=current} right=DSL_Expression_PlusMinus
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"<"
		public Keyword getLessThanSignKeyword_1_2_0() { return cLessThanSignKeyword_1_2_0; }

		//{DSL_Expression_Smaller.left=current}
		public Action getDSL_Expression_SmallerLeftAction_1_2_1() { return cDSL_Expression_SmallerLeftAction_1_2_1; }

		//right=DSL_Expression_PlusMinus
		public Assignment getRightAssignment_1_2_2() { return cRightAssignment_1_2_2; }

		//DSL_Expression_PlusMinus
		public RuleCall getRightDSL_Expression_PlusMinusParserRuleCall_1_2_2_0() { return cRightDSL_Expression_PlusMinusParserRuleCall_1_2_2_0; }

		//"<=" {DSL_Expression_Smaller_Equal.left=current} right=DSL_Expression_PlusMinus
		public Group getGroup_1_3() { return cGroup_1_3; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1_3_0() { return cLessThanSignEqualsSignKeyword_1_3_0; }

		//{DSL_Expression_Smaller_Equal.left=current}
		public Action getDSL_Expression_Smaller_EqualLeftAction_1_3_1() { return cDSL_Expression_Smaller_EqualLeftAction_1_3_1; }

		//right=DSL_Expression_PlusMinus
		public Assignment getRightAssignment_1_3_2() { return cRightAssignment_1_3_2; }

		//DSL_Expression_PlusMinus
		public RuleCall getRightDSL_Expression_PlusMinusParserRuleCall_1_3_2_0() { return cRightDSL_Expression_PlusMinusParserRuleCall_1_3_2_0; }
	}

	public class DSL_Expression_PlusMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DSL_Expression_PlusMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDSL_Expression_MultiplicationDivisionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Action cDSL_Expression_PlusLeftAction_1_0_1 = (Action)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightDSL_Expression_MultiplicationDivisionParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Action cDSL_Expression_MinusLeftAction_1_1_1 = (Action)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightDSL_Expression_MultiplicationDivisionParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//// addition/subtraction: left associative, priority 5
		//DSL_Expression_PlusMinus returns DSL_Expression:
		//	DSL_Expression_MultiplicationDivision ("+" {DSL_Expression_Plus.left=current}
		//	right=DSL_Expression_MultiplicationDivision | "-" {DSL_Expression_Minus.left=current}
		//	right=DSL_Expression_MultiplicationDivision)*;
		public ParserRule getRule() { return rule; }

		//DSL_Expression_MultiplicationDivision ("+" {DSL_Expression_Plus.left=current}
		//right=DSL_Expression_MultiplicationDivision | "-" {DSL_Expression_Minus.left=current}
		//right=DSL_Expression_MultiplicationDivision)*
		public Group getGroup() { return cGroup; }

		//DSL_Expression_MultiplicationDivision
		public RuleCall getDSL_Expression_MultiplicationDivisionParserRuleCall_0() { return cDSL_Expression_MultiplicationDivisionParserRuleCall_0; }

		//("+" {DSL_Expression_Plus.left=current} right=DSL_Expression_MultiplicationDivision | "-"
		//{DSL_Expression_Minus.left=current} right=DSL_Expression_MultiplicationDivision)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"+" {DSL_Expression_Plus.left=current} right=DSL_Expression_MultiplicationDivision
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0() { return cPlusSignKeyword_1_0_0; }

		//{DSL_Expression_Plus.left=current}
		public Action getDSL_Expression_PlusLeftAction_1_0_1() { return cDSL_Expression_PlusLeftAction_1_0_1; }

		//right=DSL_Expression_MultiplicationDivision
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }

		//DSL_Expression_MultiplicationDivision
		public RuleCall getRightDSL_Expression_MultiplicationDivisionParserRuleCall_1_0_2_0() { return cRightDSL_Expression_MultiplicationDivisionParserRuleCall_1_0_2_0; }

		//"-" {DSL_Expression_Minus.left=current} right=DSL_Expression_MultiplicationDivision
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_1_0() { return cHyphenMinusKeyword_1_1_0; }

		//{DSL_Expression_Minus.left=current}
		public Action getDSL_Expression_MinusLeftAction_1_1_1() { return cDSL_Expression_MinusLeftAction_1_1_1; }

		//right=DSL_Expression_MultiplicationDivision
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }

		//DSL_Expression_MultiplicationDivision
		public RuleCall getRightDSL_Expression_MultiplicationDivisionParserRuleCall_1_1_2_0() { return cRightDSL_Expression_MultiplicationDivisionParserRuleCall_1_1_2_0; }
	}

	public class DSL_Expression_MultiplicationDivisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DSL_Expression_MultiplicationDivision");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDSL_Expression_UnaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Action cDSL_Expression_MultiplicationLeftAction_1_0_1 = (Action)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightDSL_Expression_UnaryParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cSolidusKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Action cDSL_Expression_DivisionLeftAction_1_1_1 = (Action)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightDSL_Expression_UnaryParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cPercentSignKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Action cDSL_Expression_ModuloLeftAction_1_2_1 = (Action)cGroup_1_2.eContents().get(1);
		private final Assignment cRightAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cRightDSL_Expression_UnaryParserRuleCall_1_2_2_0 = (RuleCall)cRightAssignment_1_2_2.eContents().get(0);
		
		//// multiplication/division, left associative, priority 6
		//DSL_Expression_MultiplicationDivision returns DSL_Expression:
		//	DSL_Expression_Unary ("*" {DSL_Expression_Multiplication.left=current} right=DSL_Expression_Unary | "/"
		//	{DSL_Expression_Division.left=current} right=DSL_Expression_Unary | "%" {DSL_Expression_Modulo.left=current}
		//	right=DSL_Expression_Unary)*;
		public ParserRule getRule() { return rule; }

		//DSL_Expression_Unary ("*" {DSL_Expression_Multiplication.left=current} right=DSL_Expression_Unary | "/"
		//{DSL_Expression_Division.left=current} right=DSL_Expression_Unary | "%" {DSL_Expression_Modulo.left=current}
		//right=DSL_Expression_Unary)*
		public Group getGroup() { return cGroup; }

		//DSL_Expression_Unary
		public RuleCall getDSL_Expression_UnaryParserRuleCall_0() { return cDSL_Expression_UnaryParserRuleCall_0; }

		//("*" {DSL_Expression_Multiplication.left=current} right=DSL_Expression_Unary | "/"
		//{DSL_Expression_Division.left=current} right=DSL_Expression_Unary | "%" {DSL_Expression_Modulo.left=current}
		//right=DSL_Expression_Unary)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"*" {DSL_Expression_Multiplication.left=current} right=DSL_Expression_Unary
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_0() { return cAsteriskKeyword_1_0_0; }

		//{DSL_Expression_Multiplication.left=current}
		public Action getDSL_Expression_MultiplicationLeftAction_1_0_1() { return cDSL_Expression_MultiplicationLeftAction_1_0_1; }

		//right=DSL_Expression_Unary
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }

		//DSL_Expression_Unary
		public RuleCall getRightDSL_Expression_UnaryParserRuleCall_1_0_2_0() { return cRightDSL_Expression_UnaryParserRuleCall_1_0_2_0; }

		//"/" {DSL_Expression_Division.left=current} right=DSL_Expression_Unary
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"/"
		public Keyword getSolidusKeyword_1_1_0() { return cSolidusKeyword_1_1_0; }

		//{DSL_Expression_Division.left=current}
		public Action getDSL_Expression_DivisionLeftAction_1_1_1() { return cDSL_Expression_DivisionLeftAction_1_1_1; }

		//right=DSL_Expression_Unary
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }

		//DSL_Expression_Unary
		public RuleCall getRightDSL_Expression_UnaryParserRuleCall_1_1_2_0() { return cRightDSL_Expression_UnaryParserRuleCall_1_1_2_0; }

		//"%" {DSL_Expression_Modulo.left=current} right=DSL_Expression_Unary
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"%"
		public Keyword getPercentSignKeyword_1_2_0() { return cPercentSignKeyword_1_2_0; }

		//{DSL_Expression_Modulo.left=current}
		public Action getDSL_Expression_ModuloLeftAction_1_2_1() { return cDSL_Expression_ModuloLeftAction_1_2_1; }

		//right=DSL_Expression_Unary
		public Assignment getRightAssignment_1_2_2() { return cRightAssignment_1_2_2; }

		//DSL_Expression_Unary
		public RuleCall getRightDSL_Expression_UnaryParserRuleCall_1_2_2_0() { return cRightDSL_Expression_UnaryParserRuleCall_1_2_2_0; }
	}

	public class DSL_Expression_UnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DSL_Expression_Unary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cDSL_Object_NumberAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueNUMBERParserRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cDSL_Object_StringAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cDSL_Object_BooleanAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueBOOLEANTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cDSL_Object_RefAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cValueDSL_REFCrossReference_3_1_0 = (CrossReference)cValueAssignment_3_1.eContents().get(0);
		private final RuleCall cValueDSL_REFIDTerminalRuleCall_3_1_0_1 = (RuleCall)cValueDSL_REFCrossReference_3_1_0.eContents().get(1);
		private final Keyword cGetKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cDSL_Expression_OrParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cNotKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Action cDSL_Expression_NegateAction_5_1 = (Action)cGroup_5.eContents().get(1);
		private final Assignment cExpAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cExpDSL_Expression_UnaryParserRuleCall_5_2_0 = (RuleCall)cExpAssignment_5_2.eContents().get(0);
		
		//// Unary operators: right associative, priority 7
		//DSL_Expression_Unary returns DSL_Expression:
		//	{DSL_Object_Number} value=NUMBER | {DSL_Object_String} value=STRING | {DSL_Object_Boolean} value=BOOLEAN |
		//	{DSL_Object_Ref} value=[DSL_REF] ".get()" | "(" DSL_Expression_Or ")" | "not" {DSL_Expression_Negate}
		//	exp=DSL_Expression_Unary;
		public ParserRule getRule() { return rule; }

		//{DSL_Object_Number} value=NUMBER | {DSL_Object_String} value=STRING | {DSL_Object_Boolean} value=BOOLEAN |
		//{DSL_Object_Ref} value=[DSL_REF] ".get()" | "(" DSL_Expression_Or ")" | "not" {DSL_Expression_Negate}
		//exp=DSL_Expression_Unary
		public Alternatives getAlternatives() { return cAlternatives; }

		//{DSL_Object_Number} value=NUMBER
		public Group getGroup_0() { return cGroup_0; }

		//{DSL_Object_Number}
		public Action getDSL_Object_NumberAction_0_0() { return cDSL_Object_NumberAction_0_0; }

		//value=NUMBER
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//NUMBER
		public RuleCall getValueNUMBERParserRuleCall_0_1_0() { return cValueNUMBERParserRuleCall_0_1_0; }

		//{DSL_Object_String} value=STRING
		public Group getGroup_1() { return cGroup_1; }

		//{DSL_Object_String}
		public Action getDSL_Object_StringAction_1_0() { return cDSL_Object_StringAction_1_0; }

		//value=STRING
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_1_0() { return cValueSTRINGTerminalRuleCall_1_1_0; }

		//{DSL_Object_Boolean} value=BOOLEAN
		public Group getGroup_2() { return cGroup_2; }

		//{DSL_Object_Boolean}
		public Action getDSL_Object_BooleanAction_2_0() { return cDSL_Object_BooleanAction_2_0; }

		//value=BOOLEAN
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//BOOLEAN
		public RuleCall getValueBOOLEANTerminalRuleCall_2_1_0() { return cValueBOOLEANTerminalRuleCall_2_1_0; }

		//{DSL_Object_Ref} value=[DSL_REF] ".get()"
		public Group getGroup_3() { return cGroup_3; }

		//{DSL_Object_Ref}
		public Action getDSL_Object_RefAction_3_0() { return cDSL_Object_RefAction_3_0; }

		//value=[DSL_REF]
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//[DSL_REF]
		public CrossReference getValueDSL_REFCrossReference_3_1_0() { return cValueDSL_REFCrossReference_3_1_0; }

		//ID
		public RuleCall getValueDSL_REFIDTerminalRuleCall_3_1_0_1() { return cValueDSL_REFIDTerminalRuleCall_3_1_0_1; }

		//".get()"
		public Keyword getGetKeyword_3_2() { return cGetKeyword_3_2; }

		//"(" DSL_Expression_Or ")"
		public Group getGroup_4() { return cGroup_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }

		//DSL_Expression_Or
		public RuleCall getDSL_Expression_OrParserRuleCall_4_1() { return cDSL_Expression_OrParserRuleCall_4_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }

		//"not" {DSL_Expression_Negate} exp=DSL_Expression_Unary
		public Group getGroup_5() { return cGroup_5; }

		//"not"
		public Keyword getNotKeyword_5_0() { return cNotKeyword_5_0; }

		//{DSL_Expression_Negate}
		public Action getDSL_Expression_NegateAction_5_1() { return cDSL_Expression_NegateAction_5_1; }

		//exp=DSL_Expression_Unary
		public Assignment getExpAssignment_5_2() { return cExpAssignment_5_2; }

		//DSL_Expression_Unary
		public RuleCall getExpDSL_Expression_UnaryParserRuleCall_5_2_0() { return cExpDSL_Expression_UnaryParserRuleCall_5_2_0; }
	}
	
	
	private SensinactElements pSensinact;
	private DSL_SENSINACTElements pDSL_SENSINACT;
	private DSL_CLOCK_STOCHASTICElements pDSL_CLOCK_STOCHASTIC;
	private DSL_FLAG_AUTOSTARTElements pDSL_FLAG_AUTOSTART;
	private DSL_ResourceElements pDSL_Resource;
	private DSL_OnElements pDSL_On;
	private DSL_ECA_STATEMENTElements pDSL_ECA_STATEMENT;
	private DSL_IfDoElements pDSL_IfDo;
	private DSL_ElseIfDoElements pDSL_ElseIfDo;
	private DSL_ElseDoElements pDSL_ElseDo;
	private TerminalRule tBOOLEAN;
	private TerminalRule tINT;
	private NUMBERElements pNUMBER;
	private TerminalRule tID;
	private EXTENDED_IDElements pEXTENDED_ID;
	private DSL_REFElements pDSL_REF;
	private DSL_REF_CONDITIONElements pDSL_REF_CONDITION;
	private DSL_CEP_STATEMENTElements pDSL_CEP_STATEMENT;
	private DSL_CEP_AFTERElements pDSL_CEP_AFTER;
	private DSL_CEP_BEFOREElements pDSL_CEP_BEFORE;
	private DSL_CEP_COINCIDEElements pDSL_CEP_COINCIDE;
	private DSL_CEP_MINElements pDSL_CEP_MIN;
	private DSL_CEP_MAXElements pDSL_CEP_MAX;
	private DSL_CEP_AVGElements pDSL_CEP_AVG;
	private DSL_CEP_SUMElements pDSL_CEP_SUM;
	private DSL_CEP_COUNTElements pDSL_CEP_COUNT;
	private DSL_CEP_DURATIONElements pDSL_CEP_DURATION;
	private DSL_CEP_DURATION_MINElements pDSL_CEP_DURATION_MIN;
	private DSL_CEP_DURATION_SECElements pDSL_CEP_DURATION_SEC;
	private DSL_ListActionsElements pDSL_ListActions;
	private DSL_ResourceActionElements pDSL_ResourceAction;
	private DSL_ListParamElements pDSL_ListParam;
	private DSL_Expression_OrElements pDSL_Expression_Or;
	private DSL_Expression_AndElements pDSL_Expression_And;
	private DSL_Expression_DiffEqualElements pDSL_Expression_DiffEqual;
	private DSL_Expression_CompareElements pDSL_Expression_Compare;
	private DSL_Expression_PlusMinusElements pDSL_Expression_PlusMinus;
	private DSL_Expression_MultiplicationDivisionElements pDSL_Expression_MultiplicationDivision;
	private DSL_Expression_UnaryElements pDSL_Expression_Unary;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SensinactGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.sensinact.studio.language.Sensinact".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// ==============
	//// Main structure
	//// ==============
	//Sensinact:
	//	{Sensinact} eca=DSL_SENSINACT;
	public SensinactElements getSensinactAccess() {
		return (pSensinact != null) ? pSensinact : (pSensinact = new SensinactElements());
	}
	
	public ParserRule getSensinactRule() {
		return getSensinactAccess().getRule();
	}

	//DSL_SENSINACT:
	//	autostart=DSL_FLAG_AUTOSTART? resources+=DSL_Resource+ prob+=DSL_CLOCK_STOCHASTIC* cep+=DSL_CEP_STATEMENT* on=DSL_On
	//	eca=DSL_ECA_STATEMENT;
	public DSL_SENSINACTElements getDSL_SENSINACTAccess() {
		return (pDSL_SENSINACT != null) ? pDSL_SENSINACT : (pDSL_SENSINACT = new DSL_SENSINACTElements());
	}
	
	public ParserRule getDSL_SENSINACTRule() {
		return getDSL_SENSINACTAccess().getRule();
	}

	//DSL_CLOCK_STOCHASTIC:
	//	"use" ref+=[DSL_Resource] ("," ref+=[DSL_Resource])* "with" value=NUMBER | "use" ref+=[DSL_Resource] (","
	//	ref+=[DSL_Resource])* "with" ("W" | "N" | "E" | "U") "(" param1=NUMBER "," param2=NUMBER ")";
	public DSL_CLOCK_STOCHASTICElements getDSL_CLOCK_STOCHASTICAccess() {
		return (pDSL_CLOCK_STOCHASTIC != null) ? pDSL_CLOCK_STOCHASTIC : (pDSL_CLOCK_STOCHASTIC = new DSL_CLOCK_STOCHASTICElements());
	}
	
	public ParserRule getDSL_CLOCK_STOCHASTICRule() {
		return getDSL_CLOCK_STOCHASTICAccess().getRule();
	}

	//DSL_FLAG_AUTOSTART:
	//	"option" "autostart" "=" activated=BOOLEAN;
	public DSL_FLAG_AUTOSTARTElements getDSL_FLAG_AUTOSTARTAccess() {
		return (pDSL_FLAG_AUTOSTART != null) ? pDSL_FLAG_AUTOSTART : (pDSL_FLAG_AUTOSTART = new DSL_FLAG_AUTOSTARTElements());
	}
	
	public ParserRule getDSL_FLAG_AUTOSTARTRule() {
		return getDSL_FLAG_AUTOSTARTAccess().getRule();
	}

	//DSL_Resource:
	//	"resource" name=ID "=" "[" gatewayID=EXTENDED_ID "/" deviceID=EXTENDED_ID "/" serviceID=EXTENDED_ID "/"
	//	resourceID=EXTENDED_ID "]";
	public DSL_ResourceElements getDSL_ResourceAccess() {
		return (pDSL_Resource != null) ? pDSL_Resource : (pDSL_Resource = new DSL_ResourceElements());
	}
	
	public ParserRule getDSL_ResourceRule() {
		return getDSL_ResourceAccess().getRule();
	}

	//DSL_On:
	//	"on" triggers+=DSL_REF_CONDITION ("," triggers+=DSL_REF_CONDITION)*;
	public DSL_OnElements getDSL_OnAccess() {
		return (pDSL_On != null) ? pDSL_On : (pDSL_On = new DSL_OnElements());
	}
	
	public ParserRule getDSL_OnRule() {
		return getDSL_OnAccess().getRule();
	}

	//DSL_ECA_STATEMENT:
	//	ifdo=DSL_IfDo elseIfdo+=DSL_ElseIfDo* elsedo=DSL_ElseDo? "end if";
	public DSL_ECA_STATEMENTElements getDSL_ECA_STATEMENTAccess() {
		return (pDSL_ECA_STATEMENT != null) ? pDSL_ECA_STATEMENT : (pDSL_ECA_STATEMENT = new DSL_ECA_STATEMENTElements());
	}
	
	public ParserRule getDSL_ECA_STATEMENTRule() {
		return getDSL_ECA_STATEMENTAccess().getRule();
	}

	//DSL_IfDo:
	//	"if" condition=DSL_Expression_Or "do" actions=DSL_ListActions;
	public DSL_IfDoElements getDSL_IfDoAccess() {
		return (pDSL_IfDo != null) ? pDSL_IfDo : (pDSL_IfDo = new DSL_IfDoElements());
	}
	
	public ParserRule getDSL_IfDoRule() {
		return getDSL_IfDoAccess().getRule();
	}

	//DSL_ElseIfDo:
	//	"else if" condition=DSL_Expression_Or "do" actions=DSL_ListActions;
	public DSL_ElseIfDoElements getDSL_ElseIfDoAccess() {
		return (pDSL_ElseIfDo != null) ? pDSL_ElseIfDo : (pDSL_ElseIfDo = new DSL_ElseIfDoElements());
	}
	
	public ParserRule getDSL_ElseIfDoRule() {
		return getDSL_ElseIfDoAccess().getRule();
	}

	//DSL_ElseDo:
	//	"else do" actions=DSL_ListActions;
	public DSL_ElseDoElements getDSL_ElseDoAccess() {
		return (pDSL_ElseDo != null) ? pDSL_ElseDo : (pDSL_ElseDo = new DSL_ElseDoElements());
	}
	
	public ParserRule getDSL_ElseDoRule() {
		return getDSL_ElseDoAccess().getRule();
	}

	//// ============
	//// Basic values
	//// ============
	//terminal BOOLEAN returns ecore::EBoolean:
	//	"true" | "false";
	public TerminalRule getBOOLEANRule() {
		return (tBOOLEAN != null) ? tBOOLEAN : (tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN"));
	} 

	//// IMPORTANT : we are mixing terminal and non terminal rules
	////  * terminal rules are parsed in a FIRST & stupid step (but fast) way by the "lexer"
	////  * DataTypes rules are parsed in a SECOND step by the "parser"
	////
	//// INFO : remember that terminal rules are executed one after the other, IN THE ORDER OF WRITING
	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//NUMBER returns ecore::EBigDecimal:
	//	INT | INT "." INT;
	public NUMBERElements getNUMBERAccess() {
		return (pNUMBER != null) ? pNUMBER : (pNUMBER = new NUMBERElements());
	}
	
	public ParserRule getNUMBERRule() {
		return getNUMBERAccess().getRule();
	}

	//terminal ID:
	//	("a".."z" | "A".."Z" | "_" | "0".."9" | ":" | "-")+;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//EXTENDED_ID:
	//	ID ("." ID)*;
	public EXTENDED_IDElements getEXTENDED_IDAccess() {
		return (pEXTENDED_ID != null) ? pEXTENDED_ID : (pEXTENDED_ID = new EXTENDED_IDElements());
	}
	
	public ParserRule getEXTENDED_IDRule() {
		return getEXTENDED_IDAccess().getRule();
	}

	//// ================
	//// Basic structures 
	//// ================
	//DSL_REF:
	//	DSL_CEP_STATEMENT | DSL_Resource;
	public DSL_REFElements getDSL_REFAccess() {
		return (pDSL_REF != null) ? pDSL_REF : (pDSL_REF = new DSL_REFElements());
	}
	
	public ParserRule getDSL_REFRule() {
		return getDSL_REFAccess().getRule();
	}

	//// =============
	//// REF condition
	//// =============
	//DSL_REF_CONDITION:
	//	ref=[DSL_REF] "." "subscribe" "(" ")";
	public DSL_REF_CONDITIONElements getDSL_REF_CONDITIONAccess() {
		return (pDSL_REF_CONDITION != null) ? pDSL_REF_CONDITION : (pDSL_REF_CONDITION = new DSL_REF_CONDITIONElements());
	}
	
	public ParserRule getDSL_REF_CONDITIONRule() {
		return getDSL_REF_CONDITIONAccess().getRule();
	}

	//// ==========
	//// CEP engine
	//// ==========
	//DSL_CEP_STATEMENT:
	//	"define" name=ID "=" operation=(DSL_CEP_AFTER | DSL_CEP_BEFORE | DSL_CEP_COINCIDE | DSL_CEP_MIN | DSL_CEP_MAX |
	//	DSL_CEP_AVG | DSL_CEP_SUM | DSL_CEP_COUNT);
	public DSL_CEP_STATEMENTElements getDSL_CEP_STATEMENTAccess() {
		return (pDSL_CEP_STATEMENT != null) ? pDSL_CEP_STATEMENT : (pDSL_CEP_STATEMENT = new DSL_CEP_STATEMENTElements());
	}
	
	public ParserRule getDSL_CEP_STATEMENTRule() {
		return getDSL_CEP_STATEMENTAccess().getRule();
	}

	//DSL_CEP_AFTER:
	//	"after" "(" ref1=DSL_REF_CONDITION "," ref2=DSL_REF_CONDITION "," (start=DSL_CEP_DURATION ",")? end=DSL_CEP_DURATION
	//	")";
	public DSL_CEP_AFTERElements getDSL_CEP_AFTERAccess() {
		return (pDSL_CEP_AFTER != null) ? pDSL_CEP_AFTER : (pDSL_CEP_AFTER = new DSL_CEP_AFTERElements());
	}
	
	public ParserRule getDSL_CEP_AFTERRule() {
		return getDSL_CEP_AFTERAccess().getRule();
	}

	//DSL_CEP_BEFORE:
	//	"before" "(" ref1=DSL_REF_CONDITION "," ref2=DSL_REF_CONDITION "," (start=DSL_CEP_DURATION ",")? end=DSL_CEP_DURATION
	//	")";
	public DSL_CEP_BEFOREElements getDSL_CEP_BEFOREAccess() {
		return (pDSL_CEP_BEFORE != null) ? pDSL_CEP_BEFORE : (pDSL_CEP_BEFORE = new DSL_CEP_BEFOREElements());
	}
	
	public ParserRule getDSL_CEP_BEFORERule() {
		return getDSL_CEP_BEFOREAccess().getRule();
	}

	//DSL_CEP_COINCIDE:
	//	"coincide" "(" ref1=DSL_REF_CONDITION "," ref2=DSL_REF_CONDITION "," window=DSL_CEP_DURATION ")";
	public DSL_CEP_COINCIDEElements getDSL_CEP_COINCIDEAccess() {
		return (pDSL_CEP_COINCIDE != null) ? pDSL_CEP_COINCIDE : (pDSL_CEP_COINCIDE = new DSL_CEP_COINCIDEElements());
	}
	
	public ParserRule getDSL_CEP_COINCIDERule() {
		return getDSL_CEP_COINCIDEAccess().getRule();
	}

	//DSL_CEP_MIN:
	//	"min" "(" ref=DSL_REF_CONDITION "," window=DSL_CEP_DURATION ")";
	public DSL_CEP_MINElements getDSL_CEP_MINAccess() {
		return (pDSL_CEP_MIN != null) ? pDSL_CEP_MIN : (pDSL_CEP_MIN = new DSL_CEP_MINElements());
	}
	
	public ParserRule getDSL_CEP_MINRule() {
		return getDSL_CEP_MINAccess().getRule();
	}

	//DSL_CEP_MAX:
	//	"max" "(" ref=DSL_REF_CONDITION "," window=DSL_CEP_DURATION ")";
	public DSL_CEP_MAXElements getDSL_CEP_MAXAccess() {
		return (pDSL_CEP_MAX != null) ? pDSL_CEP_MAX : (pDSL_CEP_MAX = new DSL_CEP_MAXElements());
	}
	
	public ParserRule getDSL_CEP_MAXRule() {
		return getDSL_CEP_MAXAccess().getRule();
	}

	//DSL_CEP_AVG:
	//	"avg" "(" ref=DSL_REF_CONDITION "," window=DSL_CEP_DURATION ")";
	public DSL_CEP_AVGElements getDSL_CEP_AVGAccess() {
		return (pDSL_CEP_AVG != null) ? pDSL_CEP_AVG : (pDSL_CEP_AVG = new DSL_CEP_AVGElements());
	}
	
	public ParserRule getDSL_CEP_AVGRule() {
		return getDSL_CEP_AVGAccess().getRule();
	}

	//DSL_CEP_SUM:
	//	"sum" "(" ref=DSL_REF_CONDITION "," window=DSL_CEP_DURATION ")";
	public DSL_CEP_SUMElements getDSL_CEP_SUMAccess() {
		return (pDSL_CEP_SUM != null) ? pDSL_CEP_SUM : (pDSL_CEP_SUM = new DSL_CEP_SUMElements());
	}
	
	public ParserRule getDSL_CEP_SUMRule() {
		return getDSL_CEP_SUMAccess().getRule();
	}

	//DSL_CEP_COUNT:
	//	"count" "(" ref=DSL_REF_CONDITION "," window=DSL_CEP_DURATION ")";
	public DSL_CEP_COUNTElements getDSL_CEP_COUNTAccess() {
		return (pDSL_CEP_COUNT != null) ? pDSL_CEP_COUNT : (pDSL_CEP_COUNT = new DSL_CEP_COUNTElements());
	}
	
	public ParserRule getDSL_CEP_COUNTRule() {
		return getDSL_CEP_COUNTAccess().getRule();
	}

	//DSL_CEP_DURATION:
	//	units+=(DSL_CEP_DURATION_MIN | DSL_CEP_DURATION_SEC)+;
	public DSL_CEP_DURATIONElements getDSL_CEP_DURATIONAccess() {
		return (pDSL_CEP_DURATION != null) ? pDSL_CEP_DURATION : (pDSL_CEP_DURATION = new DSL_CEP_DURATIONElements());
	}
	
	public ParserRule getDSL_CEP_DURATIONRule() {
		return getDSL_CEP_DURATIONAccess().getRule();
	}

	//DSL_CEP_DURATION_MIN:
	//	min=NUMBER "min";
	public DSL_CEP_DURATION_MINElements getDSL_CEP_DURATION_MINAccess() {
		return (pDSL_CEP_DURATION_MIN != null) ? pDSL_CEP_DURATION_MIN : (pDSL_CEP_DURATION_MIN = new DSL_CEP_DURATION_MINElements());
	}
	
	public ParserRule getDSL_CEP_DURATION_MINRule() {
		return getDSL_CEP_DURATION_MINAccess().getRule();
	}

	//DSL_CEP_DURATION_SEC:
	//	sec=NUMBER "sec";
	public DSL_CEP_DURATION_SECElements getDSL_CEP_DURATION_SECAccess() {
		return (pDSL_CEP_DURATION_SEC != null) ? pDSL_CEP_DURATION_SEC : (pDSL_CEP_DURATION_SEC = new DSL_CEP_DURATION_SECElements());
	}
	
	public ParserRule getDSL_CEP_DURATION_SECRule() {
		return getDSL_CEP_DURATION_SECAccess().getRule();
	}

	//// ============================
	//// ECA engine : DSL_ListActions 
	//// ============================
	//DSL_ListActions:
	//	actionList+=DSL_ResourceAction ("," actionList+=DSL_ResourceAction)*;
	public DSL_ListActionsElements getDSL_ListActionsAccess() {
		return (pDSL_ListActions != null) ? pDSL_ListActions : (pDSL_ListActions = new DSL_ListActionsElements());
	}
	
	public ParserRule getDSL_ListActionsRule() {
		return getDSL_ListActionsAccess().getRule();
	}

	//DSL_ResourceAction:
	//	(variable=ID "=")? ref=[DSL_REF] "." actiontype=("act" | "set") "(" listParam=DSL_ListParam? ")";
	public DSL_ResourceActionElements getDSL_ResourceActionAccess() {
		return (pDSL_ResourceAction != null) ? pDSL_ResourceAction : (pDSL_ResourceAction = new DSL_ResourceActionElements());
	}
	
	public ParserRule getDSL_ResourceActionRule() {
		return getDSL_ResourceActionAccess().getRule();
	}

	//DSL_ListParam:
	//	param+=DSL_Expression_Or ("," param+=DSL_Expression_Or)*;
	public DSL_ListParamElements getDSL_ListParamAccess() {
		return (pDSL_ListParam != null) ? pDSL_ListParam : (pDSL_ListParam = new DSL_ListParamElements());
	}
	
	public ParserRule getDSL_ListParamRule() {
		return getDSL_ListParamAccess().getRule();
	}

	//// ===========
	//// Expressions
	//// ===========
	//// 
	//// 7  ()   functions : not, concatenate 
	//// 6  *    /    %
	//// 5  +    -
	//// 4  <    >    <=   >=
	//// 3  ==   !=
	//// 2  and
	//// 1  or
	//// 
	//// Or: left associative, priority 1
	//DSL_Expression_Or returns DSL_Expression:
	//	DSL_Expression_And ("or" {DSL_Expression_Or.left=current} right=DSL_Expression_And)*;
	public DSL_Expression_OrElements getDSL_Expression_OrAccess() {
		return (pDSL_Expression_Or != null) ? pDSL_Expression_Or : (pDSL_Expression_Or = new DSL_Expression_OrElements());
	}
	
	public ParserRule getDSL_Expression_OrRule() {
		return getDSL_Expression_OrAccess().getRule();
	}

	//// And: left associative, priority 2
	//DSL_Expression_And returns DSL_Expression:
	//	DSL_Expression_DiffEqual ("and" {DSL_Expression_And.left=current} right=DSL_Expression_DiffEqual)*;
	public DSL_Expression_AndElements getDSL_Expression_AndAccess() {
		return (pDSL_Expression_And != null) ? pDSL_Expression_And : (pDSL_Expression_And = new DSL_Expression_AndElements());
	}
	
	public ParserRule getDSL_Expression_AndRule() {
		return getDSL_Expression_AndAccess().getRule();
	}

	//// different/equal: left associative, priority 3
	//DSL_Expression_DiffEqual returns DSL_Expression:
	//	DSL_Expression_Compare ("!=" {DSL_Expression_Diff.left=current} right=DSL_Expression_Compare | "=="
	//	{DSL_Expression_Equal.left=current} right=DSL_Expression_Compare)*;
	public DSL_Expression_DiffEqualElements getDSL_Expression_DiffEqualAccess() {
		return (pDSL_Expression_DiffEqual != null) ? pDSL_Expression_DiffEqual : (pDSL_Expression_DiffEqual = new DSL_Expression_DiffEqualElements());
	}
	
	public ParserRule getDSL_Expression_DiffEqualRule() {
		return getDSL_Expression_DiffEqualAccess().getRule();
	}

	//// Comparisons: left associative, priority 4
	//DSL_Expression_Compare returns DSL_Expression:
	//	DSL_Expression_PlusMinus (">" {DSL_Expression_Larger.left=current} right=DSL_Expression_PlusMinus | ">="
	//	{DSL_Expression_Larger_Equal.left=current} right=DSL_Expression_PlusMinus | "<" {DSL_Expression_Smaller.left=current}
	//	right=DSL_Expression_PlusMinus | "<=" {DSL_Expression_Smaller_Equal.left=current} right=DSL_Expression_PlusMinus)*;
	public DSL_Expression_CompareElements getDSL_Expression_CompareAccess() {
		return (pDSL_Expression_Compare != null) ? pDSL_Expression_Compare : (pDSL_Expression_Compare = new DSL_Expression_CompareElements());
	}
	
	public ParserRule getDSL_Expression_CompareRule() {
		return getDSL_Expression_CompareAccess().getRule();
	}

	//// addition/subtraction: left associative, priority 5
	//DSL_Expression_PlusMinus returns DSL_Expression:
	//	DSL_Expression_MultiplicationDivision ("+" {DSL_Expression_Plus.left=current}
	//	right=DSL_Expression_MultiplicationDivision | "-" {DSL_Expression_Minus.left=current}
	//	right=DSL_Expression_MultiplicationDivision)*;
	public DSL_Expression_PlusMinusElements getDSL_Expression_PlusMinusAccess() {
		return (pDSL_Expression_PlusMinus != null) ? pDSL_Expression_PlusMinus : (pDSL_Expression_PlusMinus = new DSL_Expression_PlusMinusElements());
	}
	
	public ParserRule getDSL_Expression_PlusMinusRule() {
		return getDSL_Expression_PlusMinusAccess().getRule();
	}

	//// multiplication/division, left associative, priority 6
	//DSL_Expression_MultiplicationDivision returns DSL_Expression:
	//	DSL_Expression_Unary ("*" {DSL_Expression_Multiplication.left=current} right=DSL_Expression_Unary | "/"
	//	{DSL_Expression_Division.left=current} right=DSL_Expression_Unary | "%" {DSL_Expression_Modulo.left=current}
	//	right=DSL_Expression_Unary)*;
	public DSL_Expression_MultiplicationDivisionElements getDSL_Expression_MultiplicationDivisionAccess() {
		return (pDSL_Expression_MultiplicationDivision != null) ? pDSL_Expression_MultiplicationDivision : (pDSL_Expression_MultiplicationDivision = new DSL_Expression_MultiplicationDivisionElements());
	}
	
	public ParserRule getDSL_Expression_MultiplicationDivisionRule() {
		return getDSL_Expression_MultiplicationDivisionAccess().getRule();
	}

	//// Unary operators: right associative, priority 7
	//DSL_Expression_Unary returns DSL_Expression:
	//	{DSL_Object_Number} value=NUMBER | {DSL_Object_String} value=STRING | {DSL_Object_Boolean} value=BOOLEAN |
	//	{DSL_Object_Ref} value=[DSL_REF] ".get()" | "(" DSL_Expression_Or ")" | "not" {DSL_Expression_Negate}
	//	exp=DSL_Expression_Unary;
	public DSL_Expression_UnaryElements getDSL_Expression_UnaryAccess() {
		return (pDSL_Expression_Unary != null) ? pDSL_Expression_Unary : (pDSL_Expression_Unary = new DSL_Expression_UnaryElements());
	}
	
	public ParserRule getDSL_Expression_UnaryRule() {
		return getDSL_Expression_UnaryAccess().getRule();
	}

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
