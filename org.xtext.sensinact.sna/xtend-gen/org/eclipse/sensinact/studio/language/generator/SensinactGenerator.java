/**
 * generated by Xtext
 */
package org.eclipse.sensinact.studio.language.generator;

import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.sensinact.studio.language.sensinact.DSL_Resource;
import org.eclipse.sensinact.studio.language.sensinact.DSL_SENSINACT;
import org.eclipse.sensinact.studio.language.sensinact.Sensinact;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import ressources.utility.Utility;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class SensinactGenerator implements IGenerator {
  private String taskname;
  
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Sensinact> _filter = Iterables.<Sensinact>filter(_iterable, Sensinact.class);
    for (final Sensinact e : _filter) {
      {
        URI _uRI = resource.getURI();
        String _filename = Utility.getFilename(_uRI);
        String _plus = ("TASK_" + _filename);
        String _plus_1 = (_plus + ".bip");
        CharSequence _compile = this.compile(e);
        fsa.generateFile(_plus_1, _compile);
        this.taskname = Utility.filename;
        URI _uRI_1 = resource.getURI();
        String _filename_1 = Utility.getFilename(_uRI_1);
        String _plus_2 = ("TASK_" + _filename_1);
        String _plus_3 = (_plus_2 + "_ports");
        String _plus_4 = (_plus_3 + ".bip");
        CharSequence _compile_conn = this.compile_conn(e);
        fsa.generateFile(_plus_4, _compile_conn);
      }
    }
  }
  
  public CharSequence compile(final Sensinact sensinact) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("//VERIMAG ATOM GENERATION FOR THE TASK ");
    _builder.append(Utility.filename, "");
    _builder.newLineIfNotEmpty();
    _builder.append("atom type TASK_");
    _builder.append(Utility.filename, "");
    _builder.append(" ()");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("// RESOURCE REFERENCES ");
    _builder.newLine();
    {
      DSL_SENSINACT _eca = sensinact.getEca();
      EList<DSL_Resource> _resources = _eca.getResources();
      for(final DSL_Resource DSL_Resource : _resources) {
        _builder.append("\t\t ");
        _builder.append("data int ");
        String _gatewayID = DSL_Resource.getGatewayID();
        _builder.append(_gatewayID, "		 ");
        _builder.append("_");
        String _deviceID = DSL_Resource.getDeviceID();
        _builder.append(_deviceID, "		 ");
        _builder.append("_");
        String _serviceID = DSL_Resource.getServiceID();
        _builder.append(_serviceID, "		 ");
        _builder.append("_");
        String _resourceID = DSL_Resource.getResourceID();
        _builder.append(_resourceID, "		 ");
        _builder.append("\t ");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("// NOTIFICATION PORTS");
    _builder.newLine();
    _builder.append("\t\t ");
    String _notifyports = Utility.getnotifyports(sensinact);
    _builder.append(_notifyports, "		 ");
    _builder.append("\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t ");
    _builder.append("// SETTER PORT\t ");
    _builder.newLine();
    _builder.append(" \t\t ");
    String _settersports = Utility.getsettersports(sensinact);
    _builder.append(_settersports, " 		 ");
    _builder.append("\t");
    _builder.newLineIfNotEmpty();
    _builder.append(" \t\t ");
    _builder.append("// GETTER PORT\t    ");
    _builder.newLine();
    _builder.append(" \t\t ");
    String _gettersports = Utility.getgettersports(sensinact);
    _builder.append(_gettersports, " 		 ");
    _builder.newLineIfNotEmpty();
    _builder.append("         ");
    _builder.append("// SILENT PORT\t\t ");
    _builder.newLine();
    _builder.append("\t\t ");
    String _silentPorts = Utility.getSilentPorts(sensinact);
    _builder.append(_silentPorts, "		 ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// PLACES DECLARATION");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("place ");
    String _places = Utility.getPlaces(sensinact);
    _builder.append(_places, "			");
    _builder.append(" G");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("// SET INITIAL PLACE");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("initial to ");
    String _initialPlaces = Utility.getInitialPlaces(sensinact);
    _builder.append(_initialPlaces, "    		");
    _builder.append("     \t ");
    String _notification = Utility.getnotification(sensinact);
    _builder.append(_notification, "    		");
    _builder.newLineIfNotEmpty();
    _builder.append("    \t\t");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("// GET NOTIFICATION");
    _builder.newLine();
    _builder.append("    \t ");
    String _onInterraction = Utility.getOnInterraction(sensinact);
    _builder.append(_onInterraction, "    	 ");
    _builder.newLineIfNotEmpty();
    _builder.append("    \t  ");
    _builder.newLine();
    _builder.append("    \t ");
    _builder.append("// RECEIVE THE INPUTS    \t ");
    _builder.newLine();
    _builder.append("    \t ");
    String _interraction = Utility.getInterraction(sensinact);
    _builder.append(_interraction, "    	 ");
    _builder.newLineIfNotEmpty();
    _builder.append("    \t ");
    _builder.newLine();
    _builder.append("  \t     \t     \t     \t ");
    _builder.newLine();
    _builder.append("    \t ");
    String _setIfElseStates = Utility.setIfElseStates(sensinact);
    _builder.append(_setIfElseStates, "    	 ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t    ");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_conn(final Sensinact sensinact) {
    StringConcatenation _builder = new StringConcatenation();
    String _notifyports = Utility.getnotifyports(sensinact);
    _builder.append(_notifyports, "");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    String _settersports = Utility.getsettersports(sensinact);
    _builder.append(_settersports, "");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    String _gettersports = Utility.getgettersports(sensinact);
    _builder.append(_gettersports, "");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
}
